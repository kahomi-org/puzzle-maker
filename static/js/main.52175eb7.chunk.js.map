{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/WordSearch/components/Board/Board.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/availability-checker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/components/Board/index.js","puzzles/WordSearch/components/GamePlaying/index.js","puzzles/WordSearch/components/GameMaking/index.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","props","char","DISPLAY_COLOR","WordBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","selected","_this2","setState","onToggled","value","_this3","stylesObj","background","completed","react_default","a","createElement","onClick","toggle","style","React","Component","RowContainer","div","Board_templateObject","Board","_ref","board","onCellToggled","findFoundKeyInBox","generateRow","arr","index","items","i","length","cellValue","keyOfWordFoundInBox","cellKey","toString","push","components_WordBox","key","boxes","margin","paddingTop","paddingRight","getRndInteger","min","max","Math","floor","random","randomChar","chars","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","x","y","pickRandomPosition","area","getAvailableArea","isValid","word","initPosition","xcell","ycell","existingChar","createCell","tags","arguments","undefined","checkSum","appendTagToCell","cell","generateBoard","originalWords","words","toConsumableArray","sort","b","row","j","initBoard","filter","map","trim","toUpperCase","forEach","w","findIndex","position","count","console","log","fillWordToBoard","tryToFillWordToBoard","fillRandomChar","BoardContainer","boxData","reduce","sum","wordsFound","includes","handleCellToggled","selectedCells","concat","_","isEqual","handleSelectedCellsChanged","completedKey","checkWordComplete","isNumber","onWordFound","foundKey","every","some","tag","Board_Board","GamePlayingContainer","handleGameEnded","gameEnded","topic","display","justifyContent","Board_BoardContainer","Button","variant","onNewGame","disabled","remake","marginLeft","ListGroup","Item","Alert","dismissible","Heading","GameMaking","gameTitle","textValue","event","target","replace","split","text","str","toLowerCase","toUnsignedVietnamese","onMakeGame","Form","Row","Col","sm","offset","Control","type","placeholder","onChange","e","handleGameTitleChange","handleWordsChange","as","rows","Text","className","makeGame","GameStatus","Making","Playing","WordSearch","gameStatus","GameMaking_GameMaking","GamePlaying_GamePlayingContainer","App","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52175eb7.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: white;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n  &:before {\n    content: '${props => props.char}';\n    color: black;\n  };\n`;\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst SELECTED_COLOR = 'red';\nconst CORRECT_COLOR = 'silver';\nconst DISPLAY_COLOR = 'white';\n\nclass WordBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: DISPLAY_COLOR,\n      selected: false\n    };\n  }\n\n  toggle() {\n    this.setState(\n      {\n        selected: !this.state.selected\n      },\n      () => this.props.onToggled(this.props.value, this.state.selected)\n    );\n  }\n\n  render() {\n    const stylesObj = {\n      background: this.state.selected\n        ? SELECTED_COLOR\n        : this.props.completed\n        ? CORRECT_COLOR\n        : DISPLAY_COLOR\n      // textDecoration: this.props.completed ? 'line-through' : 'none'\n    };\n\n    return (\n      <Box\n        onClick={() => {\n          this.toggle();\n        }}\n        style={stylesObj}\n        char={this.props.value.char} // display by pseudo class ::before to disable browser find feature\n      />\n    );\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport WordBox from '../../../components/WordBox';\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction Board({ board, onCellToggled, findFoundKeyInBox }) {\n  const generateRow = (arr, index) => {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      const cellValue = arr[i];\n      const keyOfWordFoundInBox = findFoundKeyInBox(cellValue);\n      const cellKey = i.toString() + keyOfWordFoundInBox.toString();\n      // console.log({ keyOfWordFoundInBox });\n\n      items.push(\n        <WordBox\n          value={cellValue}\n          key={cellKey} // to re-instantiate component\n          onToggled={onCellToggled}\n          completed={keyOfWordFoundInBox !== ''}\n        />\n      );\n    }\n\n    return <RowContainer key={index}>{items}</RowContainer>;\n  };\n\n  const boxes = [];\n  for (let i = 0; i < board.length; i++) {\n    boxes.push(generateRow(board[i], i));\n  }\n\n  return (\n    <div\n      style={{\n        margin: '0 15px 0 0',\n        paddingTop: '1px',\n        paddingRight: '1px',\n        background: 'black'\n      }}\n    >\n      {boxes}\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  onCellToggled: PropTypes.func,\n  findFoundKeyInBox: PropTypes.func\n};\n\nexport default Board;\n","/* eslint-disable */\n\nexport function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXTZ';\n  const rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n\nexport function toUnsignedVietnamese(text) {\n  var str = text;\n  str = str.toLowerCase();\n  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');\n  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');\n  str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');\n  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');\n  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');\n  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');\n  str = str.replace(/đ/g, 'd');\n  str = str.replace(\n    /!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'|\\\"|\\&|\\#|\\[|\\]|~|\\$|_|`|-|{|}|\\||\\\\/g,\n    ' '\n  );\n  str = str.replace(/ + /g, ' ');\n  str = str.trim();\n  return str;\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, word, direction, initPosition) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingChar = board[xcell][ycell].char;\n    if (existingChar !== '' && existingChar !== word[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from '../util';\nimport { pickRandomDirection, pickRandomPosition } from './random-pick';\nimport { isValid } from './availability-checker';\n\nfunction createCell(char, key = -1, checkSum = 0) {\n  return {\n    char,\n    tags: [{ key, checkSum }]\n  };\n}\n\nfunction appendTagToCell(cell, key, checkSum) {\n  cell.tags.push({\n    key,\n    checkSum\n  });\n  return cell;\n}\n\nexport function generateBoard(originalWords) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  let words = [...originalWords];\n  if (!words || words.length === 0) return [];\n  // console.log('generate board');\n\n  words.sort((a, b) => b.length - a.length);\n  const ADDITIONAL_CELL = 3;\n  const size = words[0].length + ADDITIONAL_CELL;\n  const board = initBoard(size);\n  // console.log({ data: originalWords, words, size });\n\n  words\n    .filter(x => x)\n    .map(x => x.trim().toUpperCase())\n    .forEach(w => {\n      // use as the key of word in the word list\n      const index = originalWords.findIndex(x => x.trim().toUpperCase() === w);\n      // console.log({ w, index, words });\n      tryToFillWordToBoard(board, w, index);\n    });\n\n  fillRandomChar(board);\n\n  return board;\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(createCell(''));\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i].char === '') {\n        row[i].char = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word, key) {\n  // random direction\n  // random position\n  // check if availability\n  // try some times\n  // return success or not\n  const MAX_TRY = 100;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, word.length, direction);\n    // if (count === 0) {\n    //   console.log('count = 0 >>>', {\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // } else {\n    //   console.log({\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // }\n  } while (!isValid(board, word, direction, position) && ++count < MAX_TRY);\n\n  if (count >= MAX_TRY) {\n    // Ignore this word\n    console.log('ignore the word >>>', word);\n\n    return;\n  }\n\n  fillWordToBoard(board, word, direction, position, key);\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition, key) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const cell = board[xcell][ycell];\n    if (cell.char) {\n      appendTagToCell(cell, key, word.length);\n    } else {\n      board[xcell][ycell] = createCell(word[i], key, word.length);\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Board from \"./Board\";\nimport _ from \"lodash\";\nimport { generateBoard } from \"../../builder\";\n\nexport default class BoardContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    onWordFound: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedCells: [],\n      wordsFound: [],\n      board: generateBoard(props.words)\n    };\n  }\n\n  findFoundKeyInBox = boxData => {\n    const { tags } = boxData;\n    return tags.reduce((sum, value) => {\n      if (this.state.wordsFound.includes(value.key)) {\n        return sum + value.key;\n      }\n      return sum;\n    }, \"\");\n  };\n\n  handleCellToggled = (value, state) => {\n    // console.log('cell toggled >>> ', value, state);\n    let selectedCells;\n    if (state) {\n      selectedCells = [...this.state.selectedCells, value];\n    } else {\n      selectedCells = this.state.selectedCells.filter(\n        x => !_.isEqual(x, value)\n      );\n    }\n\n    this.setState(\n      {\n        selectedCells\n      },\n      this.handleSelectedCellsChanged\n    );\n  };\n\n  handleSelectedCellsChanged = () => {\n    const completedKey = this.checkWordComplete();\n    // console.log('>>> completedKey: ', completedKey);\n\n    if (_.isNumber(completedKey)) {\n      console.log(\"congratulation >>> you found one word\");\n      this.setState(\n        {\n          selectedCells: [],\n          wordsFound: [...this.state.wordsFound, completedKey]\n        },\n        () => this.props.onWordFound(this.state.wordsFound)\n      );\n    }\n  };\n\n  checkWordComplete = () => {\n    const { selectedCells } = this.state;\n    // same key\n    // num of items = checkSum\n    // key > 0\n    if (selectedCells && selectedCells.length > 0) {\n      const { tags } = selectedCells[0];\n      let foundKey = null;\n      // console.log('tags ', tags, selectedCells);\n      tags.forEach(({ key, checkSum }) => {\n        if (key >= 0 && checkSum === selectedCells.length) {\n          const sameKey = _.every(selectedCells, cell =>\n            _.some(cell.tags, tag => tag.key === key)\n          );\n          // console.log('tag >>> ', { key, checkSum, sameKey });\n          if (sameKey) {\n            foundKey = key;\n            return;\n          }\n        }\n      });\n\n      return foundKey;\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    return (\n      <Board\n        board={this.state.board}\n        onCellToggled={this.handleCellToggled}\n        findFoundKeyInBox={this.findFoundKeyInBox}\n      />\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Button, ListGroup, Alert } from 'react-bootstrap';\nimport Board from '../Board';\nimport PropTypes from 'prop-types';\n\nexport default class GamePlayingContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameEnded: false,\n      wordsFound: []\n    };\n  }\n\n  handleGameEnded = () => {\n    const { wordsFound } = this.state;\n    if (\n      wordsFound.length > 0 &&\n      wordsFound.length === this.props.words.length\n    ) {\n      this.setState({\n        gameEnded: true\n      });\n    }\n  };\n\n  remake() {}\n\n  render() {\n    const { words } = this.props;\n    return (\n      <div>\n        <h1>{this.props.topic || 'Have fun'}</h1>\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center'\n          }}\n        >\n          <Board\n            words={words}\n            onWordFound={wordsFound => {\n              this.setState({ wordsFound }, this.handleGameEnded);\n            }}\n          />\n          <div>\n            <Button\n              variant=\"success\"\n              onClick={this.props.onNewGame}\n              disabled={!this.state.gameEnded}\n            >\n              New game\n            </Button>\n            <Button\n              variant=\"success\"\n              onClick={this.remake}\n              // disabled={!this.state.gameEnded}\n              style={{ marginLeft: '10px' }}\n            >\n              Remake\n            </Button>\n            <br />\n            <br />\n            <ListGroup>\n              {words.map((w, index) => {\n                return (\n                  <ListGroup.Item\n                    key={index}\n                    variant={\n                      this.state.wordsFound &&\n                      this.state.wordsFound.includes(index)\n                        ? 'dark'\n                        : ''\n                    }\n                  >\n                    {w}\n                  </ListGroup.Item>\n                );\n              })}\n            </ListGroup>\n          </div>\n        </div>\n        <br />\n        <br />\n        {this.state.gameEnded && (\n          <Alert dismissible variant=\"primary\">\n            <Alert.Heading>Congratulation!</Alert.Heading>\n            <p>You have found all the words</p>\n          </Alert>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { toUnsignedVietnamese } from '../../../util';\n\nexport default class GameMaking extends Component {\n  state = {\n    gameTitle: '',\n    textValue: ''\n  };\n\n  handleWordsChange(event) {\n    const value = event.target.value;\n    this.setState({ textValue: value });\n  }\n\n  handleGameTitleChange(event) {\n    const value = event.target.value;\n    this.setState({ gameTitle: value });\n  }\n\n  makeGame() {\n    if (!this.state.textValue) return;\n    // Remove spaces\n    // split by comma or line\n    // remove empty items\n    // const unsignedText = toUnsignedVietnamese(this.state.textValue);\n    // console.log({ unsignedText, replace: unsignedText.replace(/ */g, \"\") });\n\n    const words = this.state.textValue\n      .replace(/ */g, '')\n      .split(/,|\\n/)\n      .filter(x => x)\n      .map(x => toUnsignedVietnamese(x));\n    if (words.length === 0) return;\n\n    this.props.onMakeGame(words, this.state.gameTitle);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <br />\n        <Form>\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                type=\"text\"\n                placeholder=\"What's the topic?\"\n                value={this.state.gameTitle}\n                onChange={e => this.handleGameTitleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                placeholder=\"Enter the list of words\"\n                value={this.state.textValue}\n                onChange={e => this.handleWordsChange(e)}\n                as=\"textarea\"\n                rows=\"6\"\n              />\n            </Col>\n          </Form.Row>\n          <Form.Text className=\"text-muted\">\n            Separated by comma (,) or line\n          </Form.Text>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.makeGame();\n            }}\n          >\n            Make game\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\nimport GamePlayingContainer from './components/GamePlaying';\nimport GameMaking from './components/GameMaking';\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst GameStatus = {\n  Making: 0,\n  Playing: 1\n};\n\nclass WordSearch extends React.Component {\n  state = {\n    words: [],\n    gameStatus: GameStatus.Making\n  };\n\n  makeGame = (words, topic) => {\n    this.setState({\n      words,\n      topic,\n      gameEnded: false,\n      gameStatus: GameStatus.Playing\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.gameStatus === GameStatus.Making && (\n          <GameMaking onMakeGame={this.makeGame} />\n        )}\n        <br />\n        {this.state.gameStatus === GameStatus.Playing && (\n          <GamePlayingContainer\n            words={this.state.words}\n            topic={this.state.topic}\n            onNewGame={() =>\n              this.setState({\n                gameStatus: GameStatus.Making\n              })\n            }\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}