{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/WordSearch/components/Board/Board.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/availability-checker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/components/Board/index.js","puzzles/WordSearch/components/GamePlaying/CustomizedCountDown.js","puzzles/WordSearch/components/GamePlaying/components/WordList.js","puzzles/WordSearch/components/GamePlaying/index.js","puzzles/WordSearch/components/GameMaking/index.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","props","char","DISPLAY_COLOR","WordBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","selected","_this2","setState","onToggled","value","_this3","stylesObj","background","completed","react_default","a","createElement","onClick","disabled","toggle","style","React","Component","RowContainer","div","Board_templateObject","Board","_ref","board","onCellToggled","findFoundKeyInBox","generateRow","arr","index","items","i","length","cellValue","keyOfWordFoundInBox","cellKey","toString","push","components_WordBox","key","boxes","margin","overflowX","paddingTop","paddingRight","getRndInteger","min","max","Math","floor","random","randomChar","chars","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","x","y","pickRandomPosition","area","getAvailableArea","isValid","word","initPosition","xcell","ycell","existingChar","createCell","tags","arguments","undefined","checkSum","appendTagToCell","cell","generateBoard","originalWords","words","toConsumableArray","sort","b","row","j","initBoard","renderFailed","filter","map","trim","toUpperCase","forEach","w","findIndex","position","count","fillWordToBoard","console","log","tryToFillWordToBoard","fillRandomChar","BoardContainer","boxData","reduce","sum","wordsFound","includes","handleCellToggled","selectedCells","concat","_","isEqual","handleSelectedCellsChanged","completedKey","checkWordComplete","isNumber","onWordFound","foundKey","every","some","tag","_generateBoard","text","str","toLowerCase","replace","toUnsignedVietnamese","onFinishRender","Board_Board","Completionist","CustomizedCountDown","hours","minutes","seconds","CustomizedCountDown_Completionist","marginLeft","padStart","WordList","ListGroup","item","notRendered","found","Item","as","variant","GamePlayingContainer","handleGameEnded","_this$state","failedIndexs","_countdown","pause","remake","boardId","timer","startedTime","Date","now","timeup","handleRenderFailed","indexs","handleTimeUp","objectSpread","handleCancel","renewConfirmationShow","handleConfirm","onNewGame","handleRenewClick","_this$state2","numOfColumn","ceil","cols","display","marginRight","topic","index_es","date","duration","onComplete","renderer","ref","countdown","justifyContent","Board_BoardContainer","Button","float","renderWordList","Modal","show","onHide","Header","closeButton","Title","Body","Footer","defaultProps","DEFAULT_LIMMITED_TIME","GameMaking","gameTitle","textValue","limittedTime","event","target","split","self","onMakeGame","Form","Row","Col","sm","offset","Control","type","placeholder","onChange","e","handleGameTitleChange","handleWordsChange","rows","Text","className","react_numeric_input_default","step","precision","snap","makeGame","GameStatus","Making","Playing","WordSearch","gameStatus","gameEnded","GameMaking_GameMaking","GamePlaying_GamePlayingContainer","App","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0kBAIA,IAAMA,EAAMC,IAAOC,KAAVC,IASO,SAAAC,GAAK,OAAIA,EAAMC,OASzBC,EAAgB,QA8CPC,cA3Cb,SAAAA,EAAYH,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMP,KAEDW,MAAQ,CACXC,MAAOV,EACPW,UAAU,GALKT,wEASV,IAAAU,EAAAP,KACPA,KAAKQ,SACH,CACEF,UAAWN,KAAKI,MAAME,UAExB,kBAAMC,EAAKd,MAAMgB,UAAUF,EAAKd,MAAMiB,MAAOH,EAAKH,MAAME,6CAInD,IAAAK,EAAAX,KACDY,EAAY,CAChBC,WAAYb,KAAKI,MAAME,SAzBN,MA2BbN,KAAKP,MAAMqB,UA1BC,SA4BZnB,GAIN,OACEoB,EAAAC,EAAAC,cAAC5B,EAAD,CACE6B,QAAS,WACHP,EAAKlB,MAAM0B,UACfR,EAAKS,UAEPC,MAAOT,EACPlB,KAAMM,KAAKP,MAAMiB,MAAMhB,cApCT4B,IAAMC,4HCnB5B,IAAMC,EAAelC,IAAOmC,IAAVC,KAsDHC,MAjDf,SAAAC,GAwBE,IAxBoE,IAArDC,EAAqDD,EAArDC,MAAOC,EAA8CF,EAA9CE,cAAeC,EAA+BH,EAA/BG,kBAAmBZ,EAAYS,EAAZT,SAClDa,EAAc,SAACC,EAAKC,GAExB,IADA,IAAMC,EAAQ,GACLC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAAK,CACnC,IAAME,EAAYL,EAAIG,GAChBG,EAAsBR,EAAkBO,GACxCE,EAAUJ,EAAEK,WAAaF,EAAoBE,WAGnDN,EAAMO,KACJ3B,EAAAC,EAAAC,cAAC0B,EAAD,CACEjC,MAAO4B,EACPM,IAAKJ,EACL/B,UAAWqB,EACXhB,UAAmC,KAAxByB,EACXpB,SAAUA,KAKhB,OAAOJ,EAAAC,EAAAC,cAACO,EAAD,CAAcoB,IAAKV,GAAQC,IAG9BU,EAAQ,GACLT,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAChCS,EAAMH,KAAKV,EAAYH,EAAMO,GAAIA,IAGnC,OACErB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAEyB,OAAQ,aAAcC,UAAW,SAC7ChC,EAAAC,EAAAC,cAAA,OACEI,MAAO,CACL2B,WAAY,MACZC,aAAc,MACdpC,WAAY,UAGbgC,sBC7CF,SAASK,EAAcC,EAAKC,GACjC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGhD,SAASK,IACd,IAAMC,EAAQ,6BAEd,OAAOA,EADMJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAMpB,SCNhD,SAASqB,EAAkBC,EAAMtB,EAAQuB,GACvC,IAAIC,EAAO,EACPC,EAAK,EACT,OAAQF,GACN,KAAK,EACHC,EAAO,EACPC,EAAKH,EAAO,EACZ,MAEF,KAAK,EACHE,EAAO,EACPC,EAAKH,EAAOtB,EAAS,EACrB,MAEF,KAAM,EACJwB,EAAOxB,EACPyB,EAAKH,EAAO,EAOhB,MAAO,CAACE,EAAMC,GAmBT,SAASC,IACd,IAAIC,EACJ,GACEA,EATK,CACLC,EAHiBf,EAAc,EAAG,GAAK,EAIvCgB,EAHkBhB,EAAc,EAAG,GAAK,SAWjB,IAAhBc,EAAUC,GAA2B,IAAhBD,EAAUE,GACxC,OAAOF,EAGF,SAASG,EAAmBR,EAAMtB,EAAQ2B,GAC/C,IAAMI,EAzBD,SAA0BT,EAAMtB,EAAQ2B,GAI7C,MAAO,CAAEC,EAHCP,EAAkBC,EAAMtB,EAAQ2B,EAAUC,GAGxCC,EAFFR,EAAkBC,EAAMtB,EAAQ2B,EAAUE,IAuBvCG,CAAiBV,EAAMtB,EAAQ2B,GAG5C,MAAO,CAAEC,EAFCf,EAAckB,EAAKH,EAAE,GAAIG,EAAKH,EAAE,IAE9BC,EADFhB,EAAckB,EAAKF,EAAE,GAAIE,EAAKF,EAAE,KCvDrC,SAASI,EAAQzC,EAAO0C,EAAMP,EAAWQ,GAC9C,IAAK,IAAIpC,EAAI,EAAGA,EAAImC,EAAKlC,OAAQD,IAAK,CACpC,IAAMqC,EAAQD,EAAaP,EAAI7B,EAAI4B,EAAUC,EACvCS,EAAQF,EAAaN,EAAI9B,EAAI4B,EAAUE,EACvCS,EAAe9C,EAAM4C,GAAOC,GAAOhF,KACzC,GAAqB,KAAjBiF,GAAuBA,IAAiBJ,EAAKnC,GAC/C,OAAO,EAIX,OAAO,ECNT,SAASwC,EAAWlF,GAClB,MAAO,CACLA,OACAmF,KAAM,CAAC,CAAEjC,IAHqCkC,UAAAzC,OAAA,QAAA0C,IAAAD,UAAA,GAAAA,UAAA,IAAjB,EAGfE,SAHgCF,UAAAzC,OAAA,QAAA0C,IAAAD,UAAA,GAAAA,UAAA,GAAH,KAO/C,SAASG,EAAgBC,EAAMtC,EAAKoC,GAKlC,OAJAE,EAAKL,KAAKnC,KAAK,CACbE,MACAoC,aAEKE,EAGF,SAASC,EAAcC,GAM5B,IAAIC,EAAKvF,OAAAwF,EAAA,EAAAxF,CAAOsF,GAChB,IAAKC,GAA0B,IAAjBA,EAAMhD,OAAc,MAAO,GAGzCgD,EAAME,KAAK,SAACvE,EAAGwE,GAAJ,OAAUA,EAAEnD,OAASrB,EAAEqB,SAClC,IAEMsB,EAAO0B,EAAM,GAAGhD,OAFE,EAGlBR,EAsBR,SAAmB8B,GAEjB,IADA,IAAM9B,EAAQ,GACLO,EAAI,EAAGA,EAAIuB,EAAMvB,IAAK,CAE7B,IADA,IAAMqD,EAAM,GACHC,EAAI,EAAGA,EAAI/B,EAAM+B,IACxBD,EAAI/C,KAAKkC,EAAW,KAEtB/C,EAAMa,KAAK+C,GAGb,OAAO5D,EAhCO8D,CAAUtC,KAAKD,IAAIO,EAFhB,IAKXiC,EAAe,GAgBrB,OAfAP,EACGQ,OAAO,SAAA5B,GAAC,OAAIA,IACZ6B,IAAI,SAAA7B,GAAC,OAAIA,EAAE8B,OAAOC,gBAClBC,QAAQ,SAAAC,GAEP,IAAMhE,EAAQkD,EAAce,UAAU,SAAAlC,GAAC,OAAIA,EAAE8B,OAAOC,gBAAkBE,KAoC5E,SAA8BrE,EAAO0C,EAAM3B,GAMzC,IAEIoB,EACAoC,EAFAC,EAAQ,EAGN1C,EAAO9B,EAAMQ,OACnB,GACE2B,EAAYD,IACZqC,EAAWjC,EAAmBR,EAAMY,EAAKlC,OAAQ2B,UAkBzCM,EAAQzC,EAAO0C,EAAMP,EAAWoC,MAAeC,EAzBzC,KA2BhB,OAAIA,EA3BY,KAqClB,SAAyBxE,EAAO0C,EAAMP,EAAWQ,EAAc5B,GAC7D,IAAK,IAAIR,EAAI,EAAGA,EAAImC,EAAKlC,OAAQD,IAAK,CACpC,IAAMqC,EAAQD,EAAaP,EAAI7B,EAAI4B,EAAUC,EACvCS,EAAQF,EAAaN,EAAI9B,EAAI4B,EAAUE,EACvCgB,EAAOrD,EAAM4C,GAAOC,GACtBQ,EAAKxF,KACPuF,EAAgBC,EAAMtC,EAAK2B,EAAKlC,QAEhCR,EAAM4C,GAAOC,GAASE,EAAWL,EAAKnC,GAAIQ,EAAK2B,EAAKlC,SAjBtDiE,CAAgBzE,EAAO0C,EAAMP,EAAWoC,EAAUxD,IAC3C,IAGP2D,QAAQC,IAAI,sBAAuBjC,IAC5B,IAzEWkC,CAAqB5E,EAAOqE,EAAGhE,IAE7C0D,EAAalD,KAAKR,KAsB1B,SAAwBL,GACtBA,EAAMoE,QAAQ,SAAAR,GACZ,IAAK,IAAIrD,EAAI,EAAGA,EAAIqD,EAAIpD,OAAQD,IACV,KAAhBqD,EAAIrD,GAAG1C,OACT+F,EAAIrD,GAAG1C,KAAO8D,OAtBpBkD,CAAe7E,GAER,CAAEA,QAAO+D,oBC7CGe,cAOnB,SAAAA,EAAYlH,GAAO,IAAAI,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA2G,IACjB9G,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6G,GAAAxG,KAAAH,KAAMP,KAkBRsC,kBAAoB,SAAA6E,GAElB,OADiBA,EAAT/B,KACIgC,OAAO,SAACC,EAAKpG,GACvB,OAAIb,EAAKO,MAAM2G,WAAWC,SAAStG,EAAMkC,KAChCkE,EAAMpG,EAAMkC,IAEdkE,GACN,KA1BcjH,EA6BnBoH,kBAAoB,SAACvG,EAAON,GAE1B,IAAI8G,EAEFA,EADE9G,EACW,GAAA+G,OAAArH,OAAAwF,EAAA,EAAAxF,CAAOD,EAAKO,MAAM8G,eAAlB,CAAiCxG,IAE9Bb,EAAKO,MAAM8G,cAAcrB,OACvC,SAAA5B,GAAC,OAAKmD,IAAEC,QAAQpD,EAAGvD,KAIvBb,EAAKW,SACH,CACE0G,iBAEFrH,EAAKyH,6BA5CUzH,EAgDnByH,2BAA6B,WAC3B,IAAMC,EAAe1H,EAAK2H,oBAGtBJ,IAAEK,SAASF,KACbhB,QAAQC,IAAI,yCACZ3G,EAAKW,SACH,CACE0G,cAAe,GACfH,WAAU,GAAAI,OAAArH,OAAAwF,EAAA,EAAAxF,CAAMD,EAAKO,MAAM2G,YAAjB,CAA6BQ,KAEzC,kBAAM1H,EAAKJ,MAAMiI,YAAY7H,EAAKO,MAAM2G,gBA3D3BlH,EAgEnB2H,kBAAoB,WAAM,IAChBN,EAAkBrH,EAAKO,MAAvB8G,cAIR,GAAIA,GAAiBA,EAAc7E,OAAS,EAAG,KACrCwC,EAASqC,EAAc,GAAvBrC,KACJ8C,EAAW,KAef,OAbA9C,EAAKoB,QAAQ,SAAArE,GAAuB,IAApBgB,EAAoBhB,EAApBgB,IAAKoC,EAAepD,EAAfoD,SACnB,GAAIpC,GAAO,GAAKoC,IAAakC,EAAc7E,QACzB+E,IAAEQ,MAAMV,EAAe,SAAAhC,GAAI,OACzCkC,IAAES,KAAK3C,EAAKL,KAAM,SAAAiD,GAAG,OAAIA,EAAIlF,MAAQA,MAKrC,YADA+E,EAAW/E,KAMV+E,EAEP,OAAO,MArFT,IAHiBI,EAOe5C,EAJlB1F,EAAM4F,MAAMS,IAAI,SAAA7B,GAAC,OJL5B,SAA8B+D,GACnC,IAAIC,EAAMD,EAeV,OADAC,GADAA,GAJAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,GADAA,EAAMA,EAAIC,eACAC,QAAQ,kHAAsC,MAC9CA,QAAQ,0EAA0B,MAClCA,QAAQ,kCAAc,MACtBA,QAAQ,kHAAsC,MAC9CA,QAAQ,4EAA0B,MAClCA,QAAQ,oCAAc,MACtBA,QAAQ,UAAM,MACdA,QACR,yFACA,MAEQA,QAAQ,OAAQ,MAChBpC,OITNqC,CAAqBnE,GAAGkE,QAAQ,MAAO,OAGjCtG,EAPSkG,EAOTlG,MAAO+D,EAPEmC,EAOFnC,aAPE,OASjB/F,EAAKO,MAAQ,CACX8G,cAAe,GACfH,WAAY,GACZlF,QACA+D,aAAcA,GAGhBnG,EAAM4I,eAAezC,GAhBJ/F,wEA6FjB,OACEkB,EAAAC,EAAAC,cAACqH,EAAD,CACEzG,MAAO7B,KAAKI,MAAMyB,MAClBC,cAAe9B,KAAKiH,kBACpBlF,kBAAmB/B,KAAK+B,kBACxBZ,SAAUnB,KAAKP,MAAM0B,kBAzGeI,qBCH/BgH,EAAgB,kBAC3BxH,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAAEhB,MAAO,SAAtB,uDAIamI,EAAA,SAAA5G,GAA4CA,EAAzC6G,MAAyC,IAAlCC,EAAkC9G,EAAlC8G,QAASC,EAAyB/G,EAAzB+G,QAChC,OADyD/G,EAAhBd,UAGhCC,EAAAC,EAAAC,cAAC2H,EAAD,MAIL7H,EAAAC,EAAAC,cAAA,yBAEEF,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAAEhB,MAAO,MAAOwI,WAAY,SACtCzB,IAAE0B,SAASJ,EAAS,EAAG,KAD1B,IACiCtB,IAAE0B,SAASH,EAAS,EAAG,iBChBjD,SAASI,EAATnH,GAA6B,IAATyD,EAASzD,EAATyD,MACjC,OACEtE,EAAAC,EAAAC,cAAC+H,EAAA,EAAD,KACG3D,EAAMS,IAAI,SAACmD,EAAM/G,GAAU,IAClBxB,EAA8BuI,EAA9BvI,MAAOwI,EAAuBD,EAAvBC,YAAaC,EAAUF,EAAVE,MAC5B,OACEpI,EAAAC,EAAAC,cAAC+H,EAAA,EAAUI,KAAX,CACEC,GAAG,KACHzG,IAAKV,EACLoH,QAASJ,EAAc,UAAYC,EAAQ,OAAS,IAEnDzI,UCNQ6I,cAUnB,SAAAA,EAAY9J,GAAO,IAAAI,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuJ,IACjB1J,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyJ,GAAApJ,KAAAH,KAAMP,KAcR+J,gBAAkB,WAAM,IAAAC,EACe5J,EAAKO,MAAlC2G,EADc0C,EACd1C,WAAY2C,EADED,EACFC,aAChB3C,EAAW1E,OAASqH,EAAarH,SAAWxC,EAAKJ,MAAM4F,MAAMhD,QAC/DxC,EAAKW,SACH,CACEM,WAAW,GAEb,WACEjB,EAAK8J,WAAWC,WAvBL/J,EA6BnBgK,OAAS,WACPhK,EAAKW,SAAS,CACZuG,WAAY,GACZ+C,QAASjK,EAAKO,MAAM0J,QAAU,EAC9BC,MAAO,CACLC,YAAaC,KAAKC,MAClBC,QAAQ,GAEVrJ,WAAW,KArCIjB,EAyCnBuK,mBAAqB,SAAAC,GAEnBxK,EAAKW,SAAS,CACZkJ,aAAcW,KA5CCxK,EAgDnByK,aAAe,WACbzK,EAAKW,SAAS,CACZuJ,MAAMjK,OAAAyK,EAAA,EAAAzK,CAAA,GACDD,EAAKO,MAAM2J,MADX,CAEHI,QAAQ,OApDKtK,EA8FnB2K,aAAe,WACb3K,EAAKW,SAAS,CACZiK,uBAAuB,KAhGR5K,EAoGnB6K,cAAgB,WACd7K,EAAKW,SACH,CACEiK,uBAAuB,GAEzB5K,EAAKJ,MAAMkL,YAzGI9K,EA6GnB+K,iBAAmB,YACE/K,EAAKO,MAAMU,WAAajB,EAAKO,MAAM2G,WAAW1E,OAAS,EAExExC,EAAKW,SAAS,CACZiK,uBAAuB,IAGzB5K,EAAKJ,MAAMkL,aAlHb9K,EAAKO,MAAQ,CACX2G,WAAY,GACZ+C,QAAS,EACTJ,aAAc,GACdK,MAAO,CACLC,YAAaC,KAAKC,MAClBC,QAAQ,GAEVrJ,WAAW,EACX2J,uBAAuB,GAXR5K,gFAkEjB,IATe,IACPwF,EAAUrF,KAAKP,MAAf4F,MADOwF,EAEsB7K,KAAKI,MAAlCsJ,EAFOmB,EAEPnB,aAAc3C,EAFP8D,EAEO9D,WAGhB+D,EAAczH,KAAK0H,KAAK1F,EAAMhD,OADR,GAItB2I,EAAO,GACJ5I,EAAI,EAAGA,EAAI0I,EAAa1I,IAC/B4I,EAAKtI,KAAK,IAcZ,OAXA2C,EAAMY,QAAQ,SAAC1B,EAAMrC,GACnB,IAAM+G,EAAO,CACXvI,MAAO6D,EACP2E,YAAaQ,EAAa1C,SAAS9E,GACnCiH,MAAOpC,GAAcA,EAAWC,SAAS9E,IAI3C8I,EADiB9I,EAAQ4I,GACVpI,KAAKuG,KAIpBlI,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAE4J,QAAS,SACpBD,EAAKlF,IAAI,SAAC7B,EAAG/B,GACZ,OACEnB,EAAAC,EAAAC,cAAA,OAAK2B,IAAKV,EAAOb,MAAO,CAAE6J,YAAa,SACrCnK,EAAAC,EAAAC,cAAC8H,EAAD,CAAU1D,MAAOpB,yCAkCpB,IAAA1D,EAAAP,KACCqF,EAAUrF,KAAKP,MAAf4F,MACR,OACEtE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKjB,KAAKP,MAAM0L,OAAS,YACzBpK,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACmK,EAAA,EAAD,CACEC,KAAMrL,KAAKI,MAAM2J,MAAMC,YAAchK,KAAKP,MAAM6L,SAChDC,WAAYvL,KAAKsK,aACjBkB,SAAUhD,EACV5F,IAAK5C,KAAKI,MAAM2J,MAAMC,YACtByB,IAAK,SAAAC,GAAS,OAAKnL,EAAKoJ,WAAa+B,MAGxC1L,KAAKI,MAAMU,WACVC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAAEhB,MAAO,UAAtB,oBAGJU,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OACEI,MAAO,CACL4J,QAAS,OACTU,eAAgB,WAGlB5K,EAAAC,EAAAC,cAAC2K,EAAD,CACEzK,SAAUnB,KAAKI,MAAM2J,MAAMI,QAAUnK,KAAKI,MAAMU,UAChD8B,IAAK5C,KAAKI,MAAM0J,QAChBzE,MAAOA,EACPqC,YAAa,SAAAX,GACXxG,EAAKC,SAAS,CAAEuG,cAAcxG,EAAKiJ,kBAErCnB,eAAgBrI,KAAKoK,qBAGvBrJ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CACEvC,QAAQ,UACRpI,QAASlB,KAAK4K,kBAFhB,YAOA7J,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CACEvC,QAAQ,UACRpI,QAASlB,KAAK6J,OACdxI,MAAO,CAAEwH,WAAY,SAHvB,UAOA9H,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAEyK,MAAO,SAArB,eACe,IACb/K,EAAAC,EAAAC,cAAA,cACGjB,KAAKI,MAAM2G,WAAW1E,OADzB,IAEGgD,EAAMhD,OAASrC,KAAKI,MAAMsJ,aAAarH,SAG5CtB,EAAAC,EAAAC,cAAA,WACCjB,KAAK+L,iBACNhL,EAAAC,EAAAC,cAAA,WACCjB,KAAKI,MAAMsJ,aAAarH,OAAS,GAChCtB,EAAAC,EAAAC,cAAA,OAAKI,MAAO,CAAEhB,MAAO,QAArB,aACaL,KAAKI,MAAMsJ,aAAarH,OADrC,2EAEwD,IACtDtB,EAAAC,EAAAC,cAAA,QAAMI,MAAO,CAAEhB,MAAO,SAAtB,UAHF,2BASNU,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC+K,EAAA,EAAD,CACEC,KAAMjM,KAAKI,MAAMqK,sBACjByB,OAAQlM,KAAKwK,cAEbzJ,EAAAC,EAAAC,cAAC+K,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACvBrL,EAAAC,EAAAC,cAAC+K,EAAA,EAAMK,MAAP,eAEFtL,EAAAC,EAAAC,cAAC+K,EAAA,EAAMM,KAAP,8CACAvL,EAAAC,EAAAC,cAAC+K,EAAA,EAAMO,OAAP,KACExL,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CAAQvC,QAAQ,YAAYpI,QAASlB,KAAKwK,cAA1C,UAGAzJ,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CAAQvC,QAAQ,UAAUpI,QAASlB,KAAK0K,eAAxC,mBAzNsCnJ,aAA7BgI,EAMZiD,aAAe,CACpBlB,SAAU,0CCVRmB,EAAwB,EAETC,6MACnBtM,MAAQ,CACNuM,UAAW,GACXC,UAAW,GACXC,aAAcJ,oFAGEK,GAChB,IAAMpM,EAAQoM,EAAMC,OAAOrM,MAC3BV,KAAKQ,SAAS,CAAEoM,UAAWlM,kDAGPoM,GACpB,IAAMpM,EAAQoM,EAAMC,OAAOrM,MAC3BV,KAAKQ,SAAS,CAAEmM,UAAWjM,uCAI3B,GAAKV,KAAKI,MAAMwM,UAAhB,CAKA,IAAIvH,EAAQrF,KAAKI,MAAMwM,UACpBI,MAAM,QACNlH,IAAI,SAAAI,GAAC,OAAIA,EAAEH,SACXF,OAAO,SAAA5B,GAAC,OAAIA,IAIM,KAFrBoB,EAAiCA,ERCtBQ,OAAO,SAACnF,EAAOwB,EAAO+K,GAIjC,OAHmBA,EAAK9G,UACtB,SAAAlC,GAAC,OAAIA,EAAEiE,gBAAkBxH,EAAMwH,kBAEXhG,KQHZG,QAEVrC,KAAKP,MAAMyN,WACT7H,EACArF,KAAKI,MAAMuM,UACe,GAA1B3M,KAAKI,MAAMyM,aAAoB,uCAI1B,IAAAtM,EAAAP,KACP,OACEe,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkM,EAAA,EAAD,KACEpM,EAAAC,EAAAC,cAACkM,EAAA,EAAKC,IAAN,KACErM,EAAAC,EAAAC,cAACoM,EAAA,EAAD,CAAKC,GAAI,CAAE/N,KAAM,EAAGgO,OAAQ,IAC1BxM,EAAAC,EAAAC,cAACkM,EAAA,EAAKK,QAAN,CACE7J,KAAK,KACL8J,KAAK,OACLC,YAAY,oBACZhN,MAAOV,KAAKI,MAAMuM,UAClBgB,SAAU,SAAAC,GAAC,OAAIrN,EAAKsN,sBAAsBD,QAIhD7M,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkM,EAAA,EAAKC,IAAN,KACErM,EAAAC,EAAAC,cAACoM,EAAA,EAAD,CAAKC,GAAI,CAAE/N,KAAM,EAAGgO,OAAQ,IAC1BxM,EAAAC,EAAAC,cAACkM,EAAA,EAAKK,QAAN,CACE7J,KAAK,KACL+J,YAAY,0BACZhN,MAAOV,KAAKI,MAAMwM,UAClBe,SAAU,SAAAC,GAAC,OAAIrN,EAAKuN,kBAAkBF,IACtCvE,GAAG,WACH0E,KAAK,QAIXhN,EAAAC,EAAAC,cAACkM,EAAA,EAAKa,KAAN,CAAWC,UAAU,cAArB,kCAGAlN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACkM,EAAA,EAAKC,IAAN,KACErM,EAAAC,EAAAC,cAACoM,EAAA,EAAD,CAAKC,GAAI,CAAE/N,KAAM,OAAQgO,OAAQ,IAC/BxM,EAAAC,EAAAC,cAACkM,EAAA,EAAKa,KAAN,wBAEFjN,EAAAC,EAAAC,cAACoM,EAAA,EAAD,CAAKC,GAAI,CAAE/N,KAAM,MACfwB,EAAAC,EAAAC,cAACiN,EAAAlN,EAAD,CACEiN,UAAU,eACVvN,MAAOV,KAAKI,MAAMyM,aAClB1J,IAAK,GACLC,IAAK,IACL+K,KAAM,GACNC,UAAW,EACXC,MAAI,EACJV,SAAU,SAAAjN,GACRH,EAAKC,SAAS,CACZqM,aAAcnM,QAKtBK,EAAAC,EAAAC,cAACoM,EAAA,EAAD,CAAKC,GAAI,CAAE/N,KAAM,SACfwB,EAAAC,EAAAC,cAACkM,EAAA,EAAKa,KAAN,qBAGJjN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC4K,EAAA,EAAD,CACEvC,QAAQ,UACRpI,QAAS,WACPX,EAAK+N,YAEPnN,UAAWnB,KAAKI,MAAMwM,UAAU7G,QALlC,qBAlG8BxE,aCClCgN,EAAa,CACjBC,OAAQ,EACRC,QAAS,GA6CIC,6MAzCbtO,MAAQ,CACNiF,MAAO,GACPsJ,WAAYJ,EAAWC,UAGzBF,SAAW,SAACjJ,EAAO8F,EAAO0B,GACxBhN,EAAKW,SAAS,CACZ6E,QACA8F,QACA0B,eACA+B,WAAW,EACXD,WAAYJ,EAAWE,mFAIlB,IAAAlO,EAAAP,KACP,OACEe,EAAAC,EAAAC,cAAA,WACGjB,KAAKI,MAAMuO,aAAeJ,EAAWC,QACpCzN,EAAAC,EAAAC,cAAC4N,EAAD,CAAY3B,WAAYlN,KAAKsO,WAE/BvN,EAAAC,EAAAC,cAAA,WACCjB,KAAKI,MAAMuO,aAAeJ,EAAWE,SACpC1N,EAAAC,EAAAC,cAAC6N,EAAD,CACEzJ,MAAOrF,KAAKI,MAAMiF,MAClB8F,MAAOnL,KAAKI,MAAM+K,MAClBR,UAAW,kBACTpK,EAAKC,SAAS,CACZmO,WAAYJ,EAAWC,UAG3BlD,SAAUtL,KAAKI,MAAMyM,uBAhCRvL,IAAMC,WCIhBwN,mLAVX,OACEhO,EAAAC,EAAAC,cAAA,OAAKgN,UAAU,OACblN,EAAAC,EAAAC,cAAC+N,EAAD,MACAjO,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBANUM,aCOE0N,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOxO,EAAAC,EAAAC,cAACuO,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.84dc1a97.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: white;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n  &:before {\n    content: '${props => props.char}';\n    color: black;\n  };\n`;\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst SELECTED_COLOR = 'red';\nconst CORRECT_COLOR = 'silver';\nconst DISPLAY_COLOR = 'white';\n\nclass WordBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: DISPLAY_COLOR,\n      selected: false\n    };\n  }\n\n  toggle() {\n    this.setState(\n      {\n        selected: !this.state.selected\n      },\n      () => this.props.onToggled(this.props.value, this.state.selected)\n    );\n  }\n\n  render() {\n    const stylesObj = {\n      background: this.state.selected\n        ? SELECTED_COLOR\n        : this.props.completed\n        ? CORRECT_COLOR\n        : DISPLAY_COLOR\n      // textDecoration: this.props.completed ? 'line-through' : 'none'\n    };\n\n    return (\n      <Box\n        onClick={() => {\n          if (this.props.disabled) return;\n          this.toggle();\n        }}\n        style={stylesObj}\n        char={this.props.value.char} // display by pseudo class ::before to disable browser find feature\n      />\n    );\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport WordBox from '../../../components/WordBox';\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction Board({ board, onCellToggled, findFoundKeyInBox, disabled }) {\n  const generateRow = (arr, index) => {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      const cellValue = arr[i];\n      const keyOfWordFoundInBox = findFoundKeyInBox(cellValue);\n      const cellKey = i.toString() + keyOfWordFoundInBox.toString();\n      // console.log({ keyOfWordFoundInBox });\n\n      items.push(\n        <WordBox\n          value={cellValue}\n          key={cellKey} // to re-instantiate component\n          onToggled={onCellToggled}\n          completed={keyOfWordFoundInBox !== ''}\n          disabled={disabled}\n        />\n      );\n    }\n\n    return <RowContainer key={index}>{items}</RowContainer>;\n  };\n\n  const boxes = [];\n  for (let i = 0; i < board.length; i++) {\n    boxes.push(generateRow(board[i], i));\n  }\n\n  return (\n    <div style={{ margin: '0 15px 0 0', overflowX: 'auto' }}>\n      <div\n        style={{\n          paddingTop: '1px',\n          paddingRight: '1px',\n          background: 'black'\n        }}\n      >\n        {boxes}\n      </div>\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  onCellToggled: PropTypes.func,\n  findFoundKeyInBox: PropTypes.func\n};\n\nexport default Board;\n","/* eslint-disable */\n\nexport function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXTZ';\n  const rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n\nexport function toUnsignedVietnamese(text) {\n  var str = text;\n  str = str.toLowerCase();\n  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');\n  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');\n  str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');\n  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');\n  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');\n  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');\n  str = str.replace(/đ/g, 'd');\n  str = str.replace(\n    /!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'|\\\"|\\&|\\#|\\[|\\]|~|\\$|_|`|-|{|}|\\||\\\\/g,\n    ' '\n  );\n  str = str.replace(/ + /g, ' ');\n  str = str.trim();\n  return str;\n}\n\nexport function distinct(array) {\n  return array.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nexport function distinctNotCaseSensitive(array) {\n  return array.filter((value, index, self) => {\n    const foundIndex = self.findIndex(\n      x => x.toLowerCase() === value.toLowerCase()\n    );\n    return foundIndex === index;\n  });\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, word, direction, initPosition) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingChar = board[xcell][ycell].char;\n    if (existingChar !== '' && existingChar !== word[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from '../util';\nimport { pickRandomDirection, pickRandomPosition } from './random-pick';\nimport { isValid } from './availability-checker';\n\nfunction createCell(char, key = -1, checkSum = 0) {\n  return {\n    char,\n    tags: [{ key, checkSum }]\n  };\n}\n\nfunction appendTagToCell(cell, key, checkSum) {\n  cell.tags.push({\n    key,\n    checkSum\n  });\n  return cell;\n}\n\nexport function generateBoard(originalWords) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  let words = [...originalWords];\n  if (!words || words.length === 0) return [];\n  // console.log('generate board');\n\n  words.sort((a, b) => b.length - a.length);\n  const ADDITIONAL_CELL = 1;\n  const MIN_SIZE = 5;\n  const size = words[0].length + ADDITIONAL_CELL;\n  const board = initBoard(Math.max(size, MIN_SIZE));\n  // console.log({ data: originalWords, words, size });\n\n  const renderFailed = [];\n  words\n    .filter(x => x)\n    .map(x => x.trim().toUpperCase())\n    .forEach(w => {\n      // use as the key of word in the word list\n      const index = originalWords.findIndex(x => x.trim().toUpperCase() === w);\n      // console.log({ w, index, words });\n      const success = tryToFillWordToBoard(board, w, index);\n      if (!success) {\n        renderFailed.push(index);\n      }\n    });\n\n  fillRandomChar(board);\n\n  return { board, renderFailed };\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(createCell(''));\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i].char === '') {\n        row[i].char = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word, key) {\n  // random direction\n  // random position\n  // check if availability\n  // try some times\n  // return success or not\n  const MAX_TRY = 100;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, word.length, direction);\n    // if (count === 0) {\n    //   console.log('count = 0 >>>', {\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // } else {\n    //   console.log({\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // }\n  } while (!isValid(board, word, direction, position) && ++count < MAX_TRY);\n\n  if (count < MAX_TRY) {\n    fillWordToBoard(board, word, direction, position, key);\n    return true;\n  } else {\n    // Ignore this word\n    console.log('ignore the word >>>', word);\n    return false;\n  }\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition, key) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const cell = board[xcell][ycell];\n    if (cell.char) {\n      appendTagToCell(cell, key, word.length);\n    } else {\n      board[xcell][ycell] = createCell(word[i], key, word.length);\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Board from './Board';\nimport _ from 'lodash';\nimport { generateBoard } from '../../builder';\nimport { toUnsignedVietnamese } from '../../../util';\n\nexport default class BoardContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    onWordFound: PropTypes.func,\n    disabled: PropTypes.bool\n  };\n\n  constructor(props) {\n    super(props);\n\n    const words = props.words.map(x =>\n      toUnsignedVietnamese(x).replace(/ */g, '')\n    );\n\n    const { board, renderFailed } = generateBoard(words);\n\n    this.state = {\n      selectedCells: [],\n      wordsFound: [],\n      board,\n      renderFailed: renderFailed\n    };\n\n    props.onFinishRender(renderFailed);\n  }\n\n  findFoundKeyInBox = boxData => {\n    const { tags } = boxData;\n    return tags.reduce((sum, value) => {\n      if (this.state.wordsFound.includes(value.key)) {\n        return sum + value.key;\n      }\n      return sum;\n    }, '');\n  };\n\n  handleCellToggled = (value, state) => {\n    // console.log('cell toggled >>> ', value, state);\n    let selectedCells;\n    if (state) {\n      selectedCells = [...this.state.selectedCells, value];\n    } else {\n      selectedCells = this.state.selectedCells.filter(\n        x => !_.isEqual(x, value)\n      );\n    }\n\n    this.setState(\n      {\n        selectedCells\n      },\n      this.handleSelectedCellsChanged\n    );\n  };\n\n  handleSelectedCellsChanged = () => {\n    const completedKey = this.checkWordComplete();\n    // console.log('>>> completedKey: ', completedKey);\n\n    if (_.isNumber(completedKey)) {\n      console.log('congratulation >>> you found one word');\n      this.setState(\n        {\n          selectedCells: [],\n          wordsFound: [...this.state.wordsFound, completedKey]\n        },\n        () => this.props.onWordFound(this.state.wordsFound)\n      );\n    }\n  };\n\n  checkWordComplete = () => {\n    const { selectedCells } = this.state;\n    // same key\n    // num of items = checkSum\n    // key > 0\n    if (selectedCells && selectedCells.length > 0) {\n      const { tags } = selectedCells[0];\n      let foundKey = null;\n      // console.log('tags ', tags, selectedCells);\n      tags.forEach(({ key, checkSum }) => {\n        if (key >= 0 && checkSum === selectedCells.length) {\n          const sameKey = _.every(selectedCells, cell =>\n            _.some(cell.tags, tag => tag.key === key)\n          );\n          // console.log('tag >>> ', { key, checkSum, sameKey });\n          if (sameKey) {\n            foundKey = key;\n            return;\n          }\n        }\n      });\n\n      return foundKey;\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    return (\n      <Board\n        board={this.state.board}\n        onCellToggled={this.handleCellToggled}\n        findFoundKeyInBox={this.findFoundKeyInBox}\n        disabled={this.props.disabled}\n      />\n    );\n  }\n}\n","import React from 'react';\nimport _ from 'lodash';\n\n// Random component\nexport const Completionist = () => (\n  <span style={{ color: 'blue' }}>Không được khôn nhắm =]]</span>\n);\n\n// Renderer callback with condition\nexport default ({ hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n    return (\n      <span>\n        Time left:\n        <span style={{ color: 'red', marginLeft: '10px' }}>\n          {_.padStart(minutes, 2, '0')}:{_.padStart(seconds, 2, '0')}\n        </span>\n      </span>\n    );\n  }\n};\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nexport default function WordList({ words }) {\n  return (\n    <ListGroup>\n      {words.map((item, index) => {\n        const { value, notRendered, found } = item;\n        return (\n          <ListGroup.Item\n            as=\"li\"\n            key={index}\n            variant={notRendered ? 'warning' : found ? 'dark' : ''}\n          >\n            {value}\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport Board from '../Board';\nimport PropTypes from 'prop-types';\nimport Countdown from 'react-countdown-now';\nimport CustomizedCountDown from './CustomizedCountDown';\nimport WordList from './components/WordList';\n\nexport default class GamePlayingContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    duration: PropTypes.number\n  };\n\n  static defaultProps = {\n    duration: 3000\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsFound: [],\n      boardId: 0,\n      failedIndexs: [],\n      timer: {\n        startedTime: Date.now(),\n        timeup: false\n      },\n      completed: false,\n      renewConfirmationShow: false\n    };\n  }\n\n  handleGameEnded = () => {\n    const { wordsFound, failedIndexs } = this.state;\n    if (wordsFound.length + failedIndexs.length === this.props.words.length) {\n      this.setState(\n        {\n          completed: true\n        },\n        () => {\n          this._countdown.pause();\n        }\n      );\n    }\n  };\n\n  remake = () => {\n    this.setState({\n      wordsFound: [],\n      boardId: this.state.boardId + 1,\n      timer: {\n        startedTime: Date.now(),\n        timeup: false\n      },\n      completed: false\n    });\n  };\n\n  handleRenderFailed = indexs => {\n    // console.log({ indexs });\n    this.setState({\n      failedIndexs: indexs\n    });\n  };\n\n  handleTimeUp = () => {\n    this.setState({\n      timer: {\n        ...this.state.timer,\n        timeup: true\n      }\n    });\n  };\n\n  renderWordList() {\n    const { words } = this.props;\n    const { failedIndexs, wordsFound } = this.state;\n\n    const NUM_OF_ITEMS_IN_COL = 7;\n    const numOfColumn = Math.ceil(words.length / NUM_OF_ITEMS_IN_COL);\n    // console.log({ numOfColumn });\n\n    const cols = [];\n    for (let i = 0; i < numOfColumn; i++) {\n      cols.push([]);\n    }\n\n    words.forEach((word, index) => {\n      const item = {\n        value: word,\n        notRendered: failedIndexs.includes(index),\n        found: wordsFound && wordsFound.includes(index)\n      };\n\n      const colIndex = index % numOfColumn;\n      cols[colIndex].push(item);\n    });\n\n    return (\n      <div style={{ display: 'flex' }}>\n        {cols.map((x, index) => {\n          return (\n            <div key={index} style={{ marginRight: '20px' }}>\n              <WordList words={x} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  handleCancel = () => {\n    this.setState({\n      renewConfirmationShow: false\n    });\n  };\n\n  handleConfirm = () => {\n    this.setState(\n      {\n        renewConfirmationShow: false\n      },\n      this.props.onNewGame\n    );\n  };\n\n  handleRenewClick = () => {\n    const isPlaying = !this.state.completed && this.state.wordsFound.length > 0;\n    if (isPlaying) {\n      this.setState({\n        renewConfirmationShow: true\n      });\n    } else {\n      this.props.onNewGame();\n    }\n  };\n\n  render() {\n    const { words } = this.props;\n    return (\n      <div>\n        <h1>{this.props.topic || 'Have fun'}</h1>\n        <h2>\n          <Countdown\n            date={this.state.timer.startedTime + this.props.duration}\n            onComplete={this.handleTimeUp}\n            renderer={CustomizedCountDown}\n            key={this.state.timer.startedTime}\n            ref={countdown => (this._countdown = countdown)}\n          />\n        </h2>\n        {this.state.completed && (\n          <h3>\n            <span style={{ color: 'green' }}>Congratulation!</span>\n          </h3>\n        )}\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center'\n          }}\n        >\n          <Board\n            disabled={this.state.timer.timeup || this.state.completed}\n            key={this.state.boardId}\n            words={words}\n            onWordFound={wordsFound => {\n              this.setState({ wordsFound }, this.handleGameEnded);\n            }}\n            onFinishRender={this.handleRenderFailed}\n          />\n\n          <div>\n            <Button\n              variant=\"success\"\n              onClick={this.handleRenewClick}\n              // disabled={!this.state.timer.timeup && !this.state.completed}\n            >\n              New game\n            </Button>\n            <Button\n              variant=\"success\"\n              onClick={this.remake}\n              style={{ marginLeft: '10px' }}\n            >\n              Remake\n            </Button>\n            <br />\n            <br />\n            <div style={{ float: 'left' }}>\n              Found words:{' '}\n              <strong>\n                {this.state.wordsFound.length}/\n                {words.length - this.state.failedIndexs.length}\n              </strong>\n            </div>\n            <br />\n            {this.renderWordList()}\n            <br />\n            {this.state.failedIndexs.length > 0 && (\n              <div style={{ color: 'red' }}>\n                There are {this.state.failedIndexs.length} word(s) failed to\n                render. You can play with the rendered words or click{' '}\n                <span style={{ color: 'blue' }}>Remake</span> button to try\n                again.\n              </div>\n            )}\n          </div>\n        </div>\n        <br />\n        <br />\n        <Modal\n          show={this.state.renewConfirmationShow}\n          onHide={this.handleCancel}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>Renew</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Do you really want to renew the game?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleCancel}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={this.handleConfirm}>\n              Renew\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { distinctNotCaseSensitive } from '../../../util';\nimport NumericInput from 'react-numeric-input';\n\nconst DEFAULT_LIMMITED_TIME = 3;\n\nexport default class GameMaking extends Component {\n  state = {\n    gameTitle: '',\n    textValue: '',\n    limittedTime: DEFAULT_LIMMITED_TIME\n  };\n\n  handleWordsChange(event) {\n    const value = event.target.value;\n    this.setState({ textValue: value });\n  }\n\n  handleGameTitleChange(event) {\n    const value = event.target.value;\n    this.setState({ gameTitle: value });\n  }\n\n  makeGame() {\n    if (!this.state.textValue) return;\n    // split\n    // trim\n    // remove empty items\n    // distinct\n    let words = this.state.textValue\n      .split(/,|\\n/)\n      .map(w => w.trim())\n      .filter(x => x);\n\n    words = distinctNotCaseSensitive(words);\n\n    if (words.length === 0) return;\n\n    this.props.onMakeGame(\n      words,\n      this.state.gameTitle,\n      this.state.limittedTime * 60 * 1000\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <br />\n        <Form>\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                type=\"text\"\n                placeholder=\"What's the topic?\"\n                value={this.state.gameTitle}\n                onChange={e => this.handleGameTitleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                placeholder=\"Enter the list of words\"\n                value={this.state.textValue}\n                onChange={e => this.handleWordsChange(e)}\n                as=\"textarea\"\n                rows=\"6\"\n              />\n            </Col>\n          </Form.Row>\n          <Form.Text className=\"text-muted\">\n            Separated by comma (,) or line\n          </Form.Text>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 'auto', offset: 4 }}>\n              <Form.Text>Limmited Time:</Form.Text>\n            </Col>\n            <Col sm={{ span: '1' }}>\n              <NumericInput\n                className=\"form-control\"\n                value={this.state.limittedTime}\n                min={0.5}\n                max={100}\n                step={0.5}\n                precision={1}\n                snap\n                onChange={value => {\n                  this.setState({\n                    limittedTime: value\n                  });\n                }}\n              />\n            </Col>\n            <Col sm={{ span: 'auto' }}>\n              <Form.Text>in minutes</Form.Text>\n            </Col>\n          </Form.Row>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.makeGame();\n            }}\n            disabled={!this.state.textValue.trim()}\n          >\n            Generate\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\nimport GamePlayingContainer from './components/GamePlaying';\nimport GameMaking from './components/GameMaking';\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst GameStatus = {\n  Making: 0,\n  Playing: 1\n};\n\nclass WordSearch extends React.Component {\n  state = {\n    words: [],\n    gameStatus: GameStatus.Making\n  };\n\n  makeGame = (words, topic, limittedTime) => {\n    this.setState({\n      words,\n      topic,\n      limittedTime,\n      gameEnded: false,\n      gameStatus: GameStatus.Playing\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.gameStatus === GameStatus.Making && (\n          <GameMaking onMakeGame={this.makeGame} />\n        )}\n        <br />\n        {this.state.gameStatus === GameStatus.Playing && (\n          <GamePlayingContainer\n            words={this.state.words}\n            topic={this.state.topic}\n            onNewGame={() =>\n              this.setState({\n                gameStatus: GameStatus.Making\n              })\n            }\n            duration={this.state.limittedTime}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}