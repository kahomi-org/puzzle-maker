{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/WordSearch/components/Board/Board.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/availability-checker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/components/Board/index.js","puzzles/WordSearch/components/GamePlaying/index.js","puzzles/WordSearch/components/GameMaking/index.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","DISPLAY_COLOR","WordBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","selected","_this2","setState","onToggled","value","_this3","stylesObj","background","completed","react_default","a","createElement","onClick","toggle","style","char","React","Component","RowContainer","div","Board_templateObject","Board","_ref","board","onCellToggled","findFoundKeyInBox","generateRow","arr","index","items","i","length","cellValue","keyOfWordFoundInBox","cellKey","toString","push","components_WordBox","key","boxes","margin","getRndInteger","min","max","Math","floor","random","randomChar","chars","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","x","y","pickRandomPosition","area","getAvailableArea","isValid","word","initPosition","xcell","ycell","existingChar","createCell","tags","arguments","undefined","checkSum","appendTagToCell","cell","generateBoard","originalWords","words","toConsumableArray","sort","b","row","j","initBoard","filter","map","trim","toUpperCase","forEach","w","findIndex","position","count","console","log","fillWordToBoard","tryToFillWordToBoard","fillRandomChar","BoardContainer","boxData","reduce","sum","wordsFound","includes","handleCellToggled","selectedCells","concat","_","isEqual","handleSelectedCellsChanged","completedKey","checkWordComplete","isNumber","onWordFound","foundKey","every","some","tag","Board_Board","GamePlayingContainer","handleGameEnded","gameEnded","topic","display","justifyContent","Board_BoardContainer","Button","variant","onRemake","disabled","ListGroup","Item","Alert","dismissible","Heading","GameMaking","gameTitle","textValue","event","target","split","onMakeGame","Form","Row","Col","sm","offset","Control","type","placeholder","onChange","e","handleGameTitleChange","handleWordsChange","Text","className","makeGame","GameStatus","Making","Playing","WordSearch","gameStatus","GameMaking_GameMaking","GamePlaying_GamePlayingContainer","App","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38abacf9.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: gray;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst SELECTED_COLOR = 'red';\nconst CORRECT_COLOR = 'green';\nconst DISPLAY_COLOR = 'gray';\n\nclass WordBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: DISPLAY_COLOR,\n      selected: false\n    };\n  }\n\n  toggle() {\n    this.setState(\n      {\n        selected: !this.state.selected\n      },\n      () => this.props.onToggled(this.props.value, this.state.selected)\n    );\n  }\n\n  render() {\n    const stylesObj = {\n      background: this.state.selected\n        ? SELECTED_COLOR\n        : this.props.completed\n        ? CORRECT_COLOR\n        : DISPLAY_COLOR\n    };\n\n    return (\n      <Box\n        onClick={() => {\n          this.toggle();\n        }}\n        style={stylesObj}\n      >\n        {this.props.value.char}\n      </Box>\n    );\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\nimport WordBox from \"../../../components/WordBox\";\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction Board({ board, onCellToggled, findFoundKeyInBox }) {\n  const generateRow = (arr, index) => {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      const cellValue = arr[i];\n      const keyOfWordFoundInBox = findFoundKeyInBox(cellValue);\n      const cellKey = i.toString() + keyOfWordFoundInBox.toString();\n      // console.log({ keyOfWordFoundInBox });\n\n      items.push(\n        <WordBox\n          value={cellValue}\n          key={cellKey} // to re-instantiate component\n          onToggled={onCellToggled}\n          completed={keyOfWordFoundInBox !== \"\"}\n        />\n      );\n    }\n\n    return <RowContainer key={index}>{items}</RowContainer>;\n  };\n\n  const boxes = [];\n  for (let i = 0; i < board.length; i++) {\n    boxes.push(generateRow(board[i], i));\n  }\n\n  return <div style={{ margin: \"0 15px 0 0\" }}>{boxes}</div>;\n}\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  onCellToggled: PropTypes.func,\n  findFoundKeyInBox: PropTypes.func\n};\n\nexport default Board;\n","export function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZ\";\n  var rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, word, direction, initPosition) {\n  // console.log({ board, word, direction, initPosition });\n\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingChar = board[xcell][ycell].char;\n    if (existingChar !== '' && existingChar !== word[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from '../util';\nimport { pickRandomDirection, pickRandomPosition } from './random-pick';\nimport { isValid } from './availability-checker';\n\nfunction createCell(char, key = -1, checkSum = 0) {\n  return {\n    char,\n    tags: [{ key, checkSum }]\n  };\n}\n\nfunction appendTagToCell(cell, key, checkSum) {\n  cell.tags.push({\n    key,\n    checkSum\n  });\n  return cell;\n}\n\nexport function generateBoard(originalWords) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  let words = [...originalWords];\n  if (!words || words.length === 0) return [];\n  // console.log('generate board');\n\n  words.sort((a, b) => b.length - a.length);\n  const ADDITIONAL_CELL = 3;\n  const size = words[0].length + ADDITIONAL_CELL;\n  const board = initBoard(size);\n  // console.log({ data: originalWords, words, size });\n\n  words\n    .filter(x => x)\n    .map(x => x.trim().toUpperCase())\n    .forEach(w => {\n      // use as the key of word in the word list\n      const index = originalWords.findIndex(x => x.trim().toUpperCase() === w);\n      // console.log({ w, index, words });\n      tryToFillWordToBoard(board, w, index);\n    });\n\n  fillRandomChar(board);\n\n  return board;\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(createCell(''));\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i].char === '') {\n        row[i].char = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word, key) {\n  // random direction\n  // random position\n  // check if availability\n  // try some times\n  // return success or not\n  const MAX_TRY = 100;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, word.length, direction);\n    // console.log({ count, direction, position, word });\n  } while (!isValid(board, word, direction, position) && ++count < MAX_TRY);\n\n  if (count >= MAX_TRY) {\n    // Ignore this word\n    console.log('ignore the word >>>', word);\n\n    return;\n  }\n\n  fillWordToBoard(board, word, direction, position, key);\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition, key) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const cell = board[xcell][ycell];\n    if (cell.char) {\n      appendTagToCell(cell, key, word.length);\n    } else {\n      board[xcell][ycell] = createCell(word[i], key, word.length);\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Board from \"./Board\";\nimport _ from \"lodash\";\nimport { generateBoard } from \"../../builder\";\n\nexport default class BoardContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    onWordFound: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedCells: [],\n      wordsFound: [],\n      board: generateBoard(props.words)\n    };\n  }\n\n  findFoundKeyInBox = boxData => {\n    const { tags } = boxData;\n    return tags.reduce((sum, value) => {\n      if (this.state.wordsFound.includes(value.key)) {\n        return sum + value.key;\n      }\n      return sum;\n    }, \"\");\n  };\n\n  handleCellToggled = (value, state) => {\n    // console.log('cell toggled >>> ', value, state);\n    let selectedCells;\n    if (state) {\n      selectedCells = [...this.state.selectedCells, value];\n    } else {\n      selectedCells = this.state.selectedCells.filter(\n        x => !_.isEqual(x, value)\n      );\n    }\n\n    this.setState(\n      {\n        selectedCells\n      },\n      this.handleSelectedCellsChanged\n    );\n  };\n\n  handleSelectedCellsChanged = () => {\n    const completedKey = this.checkWordComplete();\n    // console.log('>>> completedKey: ', completedKey);\n\n    if (_.isNumber(completedKey)) {\n      console.log(\"congratulation >>> you found one word\");\n      this.setState(\n        {\n          selectedCells: [],\n          wordsFound: [...this.state.wordsFound, completedKey]\n        },\n        () => this.props.onWordFound(this.state.wordsFound)\n      );\n    }\n  };\n\n  checkWordComplete = () => {\n    const { selectedCells } = this.state;\n    // same key\n    // num of items = checkSum\n    // key > 0\n    if (selectedCells && selectedCells.length > 0) {\n      const { tags } = selectedCells[0];\n      let foundKey = null;\n      // console.log('tags ', tags, selectedCells);\n      tags.forEach(({ key, checkSum }) => {\n        if (key >= 0 && checkSum === selectedCells.length) {\n          const sameKey = _.every(selectedCells, cell =>\n            _.some(cell.tags, tag => tag.key === key)\n          );\n          // console.log('tag >>> ', { key, checkSum, sameKey });\n          if (sameKey) {\n            foundKey = key;\n            return;\n          }\n        }\n      });\n\n      return foundKey;\n    } else {\n      return null;\n    }\n  };\n\n  render() {\n    return (\n      <Board\n        board={this.state.board}\n        onCellToggled={this.handleCellToggled}\n        findFoundKeyInBox={this.findFoundKeyInBox}\n      />\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Button, ListGroup, Alert } from \"react-bootstrap\";\nimport Board from \"../Board\";\nimport PropTypes from \"prop-types\";\n\nexport default class GamePlayingContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      gameEnded: false,\n      wordsFound: []\n    };\n  }\n\n  handleGameEnded = () => {\n    const { wordsFound } = this.state;\n    if (\n      wordsFound.length > 0 &&\n      wordsFound.length === this.props.words.length\n    ) {\n      this.setState({\n        gameEnded: true\n      });\n    }\n  };\n\n  render() {\n    const { words } = this.props;\n    return (\n      <div>\n        <h1>{this.props.topic || \"Have fun\"}</h1>\n        <br />\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"center\"\n          }}\n        >\n          <Board\n            words={words}\n            onWordFound={wordsFound => {\n              this.setState({ wordsFound }, this.handleGameEnded);\n            }}\n          />\n          <div>\n            <Button\n              variant=\"success\"\n              onClick={this.props.onRemake}\n              disabled={!this.state.gameEnded}\n            >\n              Remake\n            </Button>\n            <br />\n            <br />\n            <ListGroup>\n              {words.map((w, index) => {\n                return (\n                  <ListGroup.Item\n                    key={index}\n                    variant={\n                      this.state.wordsFound &&\n                      this.state.wordsFound.includes(index)\n                        ? \"dark\"\n                        : \"\"\n                    }\n                  >\n                    {w}\n                  </ListGroup.Item>\n                );\n              })}\n            </ListGroup>\n          </div>\n        </div>\n        <br />\n        <br />\n        {this.state.gameEnded && (\n          <Alert dismissible variant=\"primary\">\n            <Alert.Heading>Congratulation!</Alert.Heading>\n            <p>You have found all the words</p>\n          </Alert>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Form, Button, Col } from \"react-bootstrap\";\n\nexport default class GameMaking extends Component {\n  state = {\n    gameTitle: \"\",\n    textValue: \"\"\n  };\n\n  handleWordsChange(event) {\n    const value = event.target.value;\n    this.setState({ textValue: value });\n  }\n\n  handleGameTitleChange(event) {\n    const value = event.target.value;\n    this.setState({ gameTitle: value });\n  }\n\n  makeGame() {\n    if (!this.state.textValue) return;\n    const words = this.state.textValue.split(\",\").filter(x => x.trim() !== \"\");\n    if (words.length === 0) return;\n\n    this.props.onMakeGame(words, this.state.gameTitle);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <br />\n        <Form>\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                type=\"text\"\n                placeholder=\"What's the topic?\"\n                value={this.state.gameTitle}\n                onChange={e => this.handleGameTitleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                type=\"text\"\n                placeholder=\"Enter the list of words\"\n                value={this.state.textValue}\n                onChange={e => this.handleWordsChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <Form.Text className=\"text-muted\">Separated by comma (,)</Form.Text>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.makeGame();\n            }}\n          >\n            Make game\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\nimport GamePlayingContainer from \"./components/GamePlaying\";\nimport GameMaking from \"./components/GameMaking\";\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst GameStatus = {\n  Making: 0,\n  Playing: 1\n};\n\nclass WordSearch extends React.Component {\n  state = {\n    words: [],\n    gameStatus: GameStatus.Making\n  };\n\n  makeGame = (words, topic) => {\n    this.setState({\n      words,\n      topic,\n      gameEnded: false,\n      gameStatus: GameStatus.Playing\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.gameStatus === GameStatus.Making && (\n          <GameMaking onMakeGame={this.makeGame} />\n        )}\n        <br />\n        {this.state.gameStatus === GameStatus.Playing && (\n          <GamePlayingContainer\n            words={this.state.words}\n            topic={this.state.topic}\n            onRemake={() =>\n              this.setState({\n                gameStatus: GameStatus.Making\n              })\n            }\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}