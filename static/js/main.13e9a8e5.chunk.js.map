{"version":3,"sources":["components/WordBox/index.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","WordBox","react_default","a","createElement","this","props","value","React","Component","generateBoard","words","length","console","log","sort","b","size","board","i","row","j","push","initBoard","filter","x","forEach","w","direction","position","rest","count","getRndInteger","randomPosition","isValid","split","c","toUpperCase","randomChar","fillRandomChar","word","valid","existingChar","min","max","Math","floor","random","chars","RowContainer","div","WordSearch_templateObject","WordSearch","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","arr","index","items","components_WordBox","key","textValue","setState","event","target","_this2","boxes","generateRow","Form","Label","Row","Col","sm","Control","as","rows","onChange","e","handleChange","Button","variant","onClick","generate","style","display","margin","App","className","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13e9a8e5.chunk.js","sourcesContent":["/**\n *\n * WordBox\n *\n */\n\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: gray;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\nclass WordBox extends React.Component {\n  render() {\n    return <Box>{this.props.value}</Box>;\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","export function generateBoard(words) {\n  if (!words || words.length === 0) return [];\n  console.log(\"generate board\");\n\n  words.sort((a, b) => a.length < b.length);\n\n  const size = words[0].length + 3;\n  const board = initBoard(size);\n  //   console.log({ words, size });\n\n  words\n    .filter(x => x)\n    .forEach(w => {\n      const MAX_TRY = 10;\n      let count = 0;\n      let direction;\n      let position;\n      let rest;\n      do {\n        direction = randomDirection();\n        position = randomPosition(size - 1, w.length);\n        rest = randomPosition(size - 1, 0);\n      } while (\n        !isValid(board, direction, position, rest, w) &&\n        ++count < MAX_TRY\n      );\n\n      // console.log({ count, direction, position, rest, w });\n\n      if (count >= MAX_TRY) {\n        // Ignore this word\n        console.log(\"ignore the word >>>\", w);\n\n        return;\n      }\n\n      w.split(\"\").forEach(c => {\n        if (direction === 0) {\n          // Horizontally\n          board[position++][rest] = c.toUpperCase();\n        } else {\n          // Vertically\n          board[rest][position++] = c.toUpperCase();\n        }\n      });\n    });\n\n  fillRandomChar(board);\n\n  return board;\n}\n\nfunction isValid(board, direction, position, rest, word) {\n  let valid = true;\n  if (direction === 0) {\n    // Horizontally\n    for (let i = 0; i < word.length; i++) {\n      // console.log({ position });\n\n      const existingChar = board[position++][rest];\n      if (existingChar !== \"\" && existingChar !== word[i]) {\n        valid = false;\n        break;\n      }\n    }\n  } else {\n    // Vertically\n    for (let i = 0; i < word.length; i++) {\n      const existingChar = board[rest][position++];\n      if (existingChar !== \"\" && existingChar !== word[i]) {\n        valid = false;\n        break;\n      }\n    }\n  }\n\n  return valid;\n  // return true;\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(\"\");\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction randomDirection() {\n  return getRndInteger(0, 1);\n}\n\nfunction randomPosition(size, length) {\n  return getRndInteger(0, size - length);\n}\n\nfunction getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction randomChar() {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZ\";\n  var rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === \"\") {\n        row[i] = randomChar();\n      }\n    }\n  });\n}\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport styled from \"styled-components\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport WordBox from \"../../components/WordBox\";\n// import words from './sample';\nimport { generateBoard } from \"./builder\";\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\nclass WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: []\n    };\n  }\n\n  generateRow(arr, index) {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(<WordBox value={arr[i]} key={i} />);\n    }\n    return <RowContainer key={index}>{items}</RowContainer>;\n  }\n\n  generate() {\n    if (!this.state.textValue) return;\n    this.setState({\n      words: this.state.textValue.split(\"\\n\")\n    });\n  }\n\n  handleChange(event) {\n    const textValue = event.target.value;\n    this.setState({ textValue, words: [] });\n    console.log(\"value >>> \", textValue);\n  }\n\n  render() {\n    // console.log('crossword rendering');\n\n    const boxes = [];\n    const board = generateBoard(this.state.words, 10);\n    for (let i = 0; i < board.length; i++) {\n      boxes.push(this.generateRow(board[i], i));\n    }\n\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <Form>\n          <Form.Label>Enter the word list (1 word per line)</Form.Label>\n          <Form.Row>\n            <Col sm=\"4\" />\n            <Col sm=\"4\">\n              <Form.Control\n                as=\"textarea\"\n                rows=\"10\"\n                value={this.state.textValue}\n                onChange={e => this.handleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.generate();\n            }}\n          >\n            Generate\n          </Button>\n        </Form>\n        <br />\n        <div style={{ display: \"table\", margin: \"0 auto\" }}>{boxes}</div>\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}