{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/avalabilityChecker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","WordBox","react_default","a","createElement","this","props","value","React","Component","getRndInteger","min","max","Math","floor","random","randomChar","chars","length","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","x","y","pickRandomPosition","area","getAvailableArea","isValid","board","word","initPosition","i","xcell","ycell","existingCell","generateBoard","words","console","log","sort","b","row","j","push","initBoard","filter","map","trim","toUpperCase","forEach","w","position","count","fillWordToBoard","tryToFillWordToBoard","fillRandomChar","RowContainer","div","WordSearch_templateObject","WordSearch","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","arr","index","items","components_WordBox","key","textValue","setState","split","event","target","_this2","boxes","generateRow","Form","Label","Row","Col","sm","Control","as","rows","onChange","e","handleChange","Button","variant","onClick","generate","style","display","margin","App","className","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mgBAUA,IAAMA,EAAMC,IAAOC,KAAVC,KAmBMC,mLANX,OAAOC,EAAAC,EAAAC,cAACP,EAAD,KAAMQ,KAAKC,MAAMC,cAFNC,IAAMC,WCrBrB,SAASC,EAAcC,EAAKC,GACjC,OAAOC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,IAAMA,EAGhD,SAASK,IACd,IAAIC,EAAQ,6BAEZ,OAAOA,EADIJ,KAAKC,MAAMD,KAAKE,SAAWE,EAAMC,SCJ9C,SAASC,EAAkBC,EAAMF,EAAQG,GACvC,IAAIC,EAAO,EACPC,EAAK,EACT,OAAQF,GACN,KAAK,EACHC,EAAO,EACPC,EAAKH,EAAO,EACZ,MAEF,KAAK,EACHE,EAAO,EACPC,EAAKH,EAAOF,EAAS,EACrB,MAEF,KAAM,EACJI,EAAOJ,EACPK,EAAKH,EAAO,EAOhB,MAAO,CAACE,EAAMC,GAmBT,SAASC,IACd,IAAIC,EACJ,GACEA,EATK,CACLC,EAHiBhB,EAAc,EAAG,GAAK,EAIvCiB,EAHkBjB,EAAc,EAAG,GAAK,SAWjB,IAAhBe,EAAUC,GAA2B,IAAhBD,EAAUE,GACxC,OAAOF,EAGF,SAASG,EAAmBR,EAAMF,EAAQO,GAC/C,IAAMI,EAzBD,SAA0BT,EAAMF,EAAQO,GAI7C,MAAO,CAAEC,EAHCP,EAAkBC,EAAMF,EAAQO,EAAUC,GAGxCC,EAFFR,EAAkBC,EAAMF,EAAQO,EAAUE,IAuBvCG,CAAiBV,EAAMF,EAAQO,GAG5C,MAAO,CAAEC,EAFChB,EAAcmB,EAAKH,EAAE,GAAIG,EAAKH,EAAE,IAE9BC,EADFjB,EAAcmB,EAAKF,EAAE,GAAIE,EAAKF,EAAE,KCvDrC,SAASI,EAAQC,EAAOC,EAAMR,EAAWS,GAG9C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKf,OAAQiB,IAAK,CACpC,IAAMC,EAAQF,EAAaR,EAAIS,EAAIV,EAAUC,EACvCW,EAAQH,EAAaP,EAAIQ,EAAIV,EAAUE,EACvCW,EAAeN,EAAMI,GAAOC,GAClC,GAAqB,KAAjBC,GAAuBA,IAAiBL,EAAKE,GAC/C,OAAO,EAIX,OAAO,ECRF,SAASI,EAAcC,GAM5B,IAAKA,GAA0B,IAAjBA,EAAMtB,OAAc,MAAO,GACzCuB,QAAQC,IAAI,kBAEZF,EAAMG,KAAK,SAACxC,EAAGyC,GAAJ,OAAUzC,EAAEe,OAAS0B,EAAE1B,SAClC,IAEMc,EAeR,SAAmBZ,GAEjB,IADA,IAAMY,EAAQ,GACLG,EAAI,EAAGA,EAAIf,EAAMe,IAAK,CAE7B,IADA,IAAMU,EAAM,GACHC,EAAI,EAAGA,EAAI1B,EAAM0B,IACxBD,EAAIE,KAAK,IAEXf,EAAMe,KAAKF,GAGb,OAAOb,EAzBOgB,CADDR,EAAM,GAAGtB,OADE,GAcxB,OATAsB,EACGS,OAAO,SAAAvB,GAAC,OAAIA,IACZwB,IAAI,SAAAxB,GAAC,OAAIA,EAAEyB,OAAOC,gBAClBC,QAAQ,SAAAC,IAgCb,SAA8BtB,EAAOC,GAMnC,IAEIR,EACA8B,EAFAC,EAAQ,EAGNpC,EAAOY,EAAMd,OACnB,GACEO,EAAYD,IACZ+B,EAAW3B,EAAmBR,EAAMa,EAAKf,OAAQO,UAEzCM,EAAQC,EAAOC,EAAMR,EAAW8B,MAAeC,EATzC,IAWhB,GAAIA,GAXY,GAed,YAFAf,QAAQC,IAAI,sBAAuBT,IAQvC,SAAyBD,EAAOC,EAAMR,EAAWS,GAC/C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAKf,OAAQiB,IAAK,CACpC,IAAMC,EAAQF,EAAaR,EAAIS,EAAIV,EAAUC,EACvCW,EAAQH,EAAaP,EAAIQ,EAAIV,EAAUE,EAC7CK,EAAMI,GAAOC,GAASJ,EAAKE,IAP7BsB,CAAgBzB,EAAOC,EAAMR,EAAW8B,GAvDpCG,CAAqB1B,EAAOsB,KAqBlC,SAAwBtB,GACtBA,EAAMqB,QAAQ,SAAAR,GACZ,IAAK,IAAIV,EAAI,EAAGA,EAAIU,EAAI3B,OAAQiB,IACf,KAAXU,EAAIV,KACNU,EAAIV,GAAKnB,OAtBf2C,CAAe3B,GAERA,mHCpBT,IAAM4B,EAAe9D,IAAO+D,IAAVC,KA+EHC,cAxEb,SAAAA,EAAYzD,GAAO,IAAA0D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA5D,KAAA0D,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA5D,KAAA4D,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAhE,KAAMC,KACDgE,MAAQ,CACX9B,MAAO,IAHQwB,2EAOPO,EAAKC,GAEf,IADA,IAAMC,EAAQ,GACLtC,EAAI,EAAGA,EAAIoC,EAAIrD,OAAQiB,IAC9BsC,EAAM1B,KAAK7C,EAAAC,EAAAC,cAACsE,EAAD,CAASnE,MAAOgE,EAAIpC,GAAIwC,IAAKxC,KAE1C,OAAOjC,EAAAC,EAAAC,cAACwD,EAAD,CAAce,IAAKH,GAAQC,sCAI7BpE,KAAKiE,MAAMM,WAChBvE,KAAKwE,SAAS,CACZrC,MAAOnC,KAAKiE,MAAMM,UAAUE,MAAM,6CAIzBC,GACX,IAAMH,EAAYG,EAAMC,OAAOzE,MAC/BF,KAAKwE,SAAS,CAAED,YAAWpC,MAAO,sCASlC,IALO,IAAAyC,EAAA5E,KAGD6E,EAAQ,GACRlD,EAAQO,EAAclC,KAAKiE,MAAM9B,OAC9BL,EAAI,EAAGA,EAAIH,EAAMd,OAAQiB,IAChC+C,EAAMnC,KAAK1C,KAAK8E,YAAYnD,EAAMG,GAAIA,IAGxC,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kCACAF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,KACElF,EAAAC,EAAAC,cAACgF,EAAA,EAAKC,MAAN,8CACAnF,EAAAC,EAAAC,cAACgF,EAAA,EAAKE,IAAN,KACEpF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAKC,GAAG,MACRtF,EAAAC,EAAAC,cAACmF,EAAA,EAAD,CAAKC,GAAG,KACNtF,EAAAC,EAAAC,cAACgF,EAAA,EAAKK,QAAN,CACEC,GAAG,WACHC,KAAK,KACLpF,MAAOF,KAAKiE,MAAMM,UAClBgB,SAAU,SAAAC,GAAC,OAAIZ,EAAKa,aAAaD,QAIvC3F,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2F,EAAA,EAAD,CACEC,QAAQ,UACRC,QAAS,WACPhB,EAAKiB,aAHT,aASFhG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAK+F,MAAO,CAAEC,QAAS,QAASC,OAAQ,WAAanB,WAjEpC1E,IAAMC,WCGhB6F,mLAVX,OACEpG,EAAAC,EAAAC,cAAA,OAAKmG,UAAU,OACbrG,EAAAC,EAAAC,cAACoG,EAAD,MACAtG,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mBANUK,aCOEgG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO7G,EAAAC,EAAAC,cAAC4G,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.72af3f04.chunk.js","sourcesContent":["/**\n *\n * WordBox\n *\n */\n\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: gray;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\nclass WordBox extends React.Component {\n  render() {\n    return <Box>{this.props.value}</Box>;\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","export function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZ\";\n  var rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, word, direction, initPosition) {\n  // console.log({ board, word, direction, initPosition });\n\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingCell = board[xcell][ycell];\n    if (existingCell !== \"\" && existingCell !== word[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from \"../util\";\nimport { pickRandomDirection, pickRandomPosition } from \"./random-pick\";\nimport { isValid } from \"./avalabilityChecker\";\n\nexport function generateBoard(words) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  if (!words || words.length === 0) return [];\n  console.log(\"generate board\");\n\n  words.sort((a, b) => a.length < b.length);\n  const ADDITIONAL_CELL = 3;\n  const size = words[0].length + ADDITIONAL_CELL;\n  const board = initBoard(size);\n  // console.log({ words, size });\n\n  words\n    .filter(x => x)\n    .map(x => x.trim().toUpperCase())\n    .forEach(w => {\n      tryToFillWordToBoard(board, w);\n    });\n\n  fillRandomChar(board);\n\n  return board;\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(\"\");\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i] === \"\") {\n        row[i] = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word) {\n  // random direction\n  // random position\n  // check if avalability\n  // try some times\n  // return sucess or not\n  const MAX_TRY = 10;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, word.length, direction);\n    // console.log({ count, direction, position, word });\n  } while (!isValid(board, word, direction, position) && ++count < MAX_TRY);\n\n  if (count >= MAX_TRY) {\n    // Ignore this word\n    console.log(\"ignore the word >>>\", word);\n\n    return;\n  }\n\n  fillWordToBoard(board, word, direction, position);\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    board[xcell][ycell] = word[i];\n  }\n}\n","import React from \"react\";\n// import PropTypes from 'prop-types';\nimport styled from \"styled-components\";\nimport { Form, Button, Col } from \"react-bootstrap\";\nimport WordBox from \"../components/WordBox\";\n// import words from './sample';\nimport { generateBoard } from \"./builder\";\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\nclass WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      words: []\n    };\n  }\n\n  generateRow(arr, index) {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      items.push(<WordBox value={arr[i]} key={i} />);\n    }\n    return <RowContainer key={index}>{items}</RowContainer>;\n  }\n\n  generate() {\n    if (!this.state.textValue) return;\n    this.setState({\n      words: this.state.textValue.split(\"\\n\")\n    });\n  }\n\n  handleChange(event) {\n    const textValue = event.target.value;\n    this.setState({ textValue, words: [] });\n    // console.log(\"value >>> \", textValue);\n  }\n\n  render() {\n    // console.log('crossword rendering');\n\n    const boxes = [];\n    const board = generateBoard(this.state.words, 10);\n    for (let i = 0; i < board.length; i++) {\n      boxes.push(this.generateRow(board[i], i));\n    }\n\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <Form>\n          <Form.Label>Enter the word list (1 word per line)</Form.Label>\n          <Form.Row>\n            <Col sm=\"4\" />\n            <Col sm=\"4\">\n              <Form.Control\n                as=\"textarea\"\n                rows=\"10\"\n                value={this.state.textValue}\n                onChange={e => this.handleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.generate();\n            }}\n          >\n            Generate\n          </Button>\n        </Form>\n        <br />\n        <div style={{ display: \"table\", margin: \"0 auto\" }}>{boxes}</div>\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}