{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/WordSearch/components/Board/Board.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/availability-checker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/components/Board/index.js","puzzles/WordSearch/wordDetection.js","puzzles/WordSearch/components/GamePlaying/CustomizedCountDown.js","puzzles/WordSearch/components/GamePlaying/components/WordList.js","puzzles/WordSearch/components/GamePlaying/index.js","puzzles/WordSearch/components/GameMaking/index.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","props","char","DISPLAY_COLOR","WordBox","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","selected","_this2","setState","onToggled","value","_this3","stylesObj","background","completed","react_default","a","createElement","onClick","disabled","toggle","style","React","Component","RowContainer","div","Board_templateObject","Board","_ref","board","onCellToggled","foundCells","findMatchedCells","cellValue","filter","x","undefined","_","find","cells","c","isEqual","position","generateRow","arr","index","items","i","length","matchedCells","cellKey","toString","reduce","s","push","components_WordBox","key","boxes","margin","overflowX","paddingTop","paddingRight","getRndInteger","min","max","Math","floor","random","randomChar","chars","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","y","pickRandomPosition","area","getAvailableArea","isValid","wordText","initPosition","xcell","existingChar","generateBoard","words","sort","b","text","row","j","createCell","initBoard","renderFailed","forEach","word","count","ycell","cell","appendTagToCell","fillWordToBoard","console","log","tryToFillWordToBoard","fillRandomChar","wordKey","tags","objectSpread","concat","toConsumableArray","BoardContainer","_formattedWords","handleCellToggled","selectedCells","handleSelectedCellsChanged","foundWord","checkWordComplete","completedKey","isNumber","wordsFound","onWordFound","found","sortedCells","sortByPosition","deltaX","deltaY","isContinued","map","join","reverse","findIndWords","findTextInWords","str","toLowerCase","replace","trim","toUnsignedVietnamese","toUpperCase","_generateBoard","onFinishRender","Board_Board","findFoundKeyInBox","Completionist","CustomizedCountDown","hours","minutes","seconds","CustomizedCountDown_Completionist","marginLeft","padStart","WordList","ListGroup","item","notRendered","Item","as","variant","GamePlayingContainer","handleGameEnded","_this$state","failedIndexs","_countdown","pause","remake","boardId","timer","startedTime","Date","now","timeup","handleRenderFailed","indexs","handleTimeUp","handleCancel","renewConfirmationShow","handleConfirm","onNewGame","handleRenewClick","_this$state2","numOfColumn","ceil","cols","includes","display","marginRight","topic","index_es","date","duration","onComplete","renderer","ref","countdown","justifyContent","Board_BoardContainer","Button","float","renderWordList","Modal","show","onHide","Header","closeButton","Title","Body","Footer","defaultProps","DEFAULT_LIMMITED_TIME","GameMaking","gameTitle","textValue","limittedTime","event","target","split","w","self","findIndex","onMakeGame","Form","Row","Col","sm","offset","Control","type","placeholder","onChange","e","handleGameTitleChange","handleWordsChange","rows","Text","className","react_numeric_input_default","step","precision","snap","makeGame","GameStatus","Making","Playing","WordSearch","gameStatus","gameEnded","GameMaking_GameMaking","GamePlaying_GamePlayingContainer","App","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.42c50b4f.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: white;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n  &:before {\n    content: '${props => props.char}';\n    color: black;\n  };\n`;\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst SELECTED_COLOR = 'red';\nconst CORRECT_COLOR = 'silver';\nconst DISPLAY_COLOR = 'white';\n\nclass WordBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: DISPLAY_COLOR,\n      selected: false\n    };\n  }\n\n  toggle() {\n    this.setState(\n      {\n        selected: !this.state.selected\n      },\n      () => this.props.onToggled(this.props.value, this.state.selected)\n    );\n  }\n\n  render() {\n    const stylesObj = {\n      background: this.state.selected\n        ? SELECTED_COLOR\n        : this.props.completed\n        ? CORRECT_COLOR\n        : DISPLAY_COLOR\n      // textDecoration: this.props.completed ? 'line-through' : 'none'\n    };\n\n    return (\n      <Box\n        onClick={() => {\n          if (this.props.disabled) return;\n          this.toggle();\n        }}\n        style={stylesObj}\n        char={this.props.value.char} // display by pseudo class ::before to disable browser find feature\n      />\n    );\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport WordBox from '../../../components/WordBox';\nimport _ from 'lodash';\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nfunction Board({ board, onCellToggled, disabled, foundCells }) {\n  const findMatchedCells = (cellValue, foundCells) => {\n    const cells = foundCells.filter(x => {\n      const cell = _.find(x.cells, c =>\n        _.isEqual(c.position, cellValue.position)\n      );\n      return cell !== undefined;\n    });\n    return cells;\n  };\n\n  const generateRow = (arr, index) => {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      const cellValue = arr[i];\n      const matchedCells = findMatchedCells(cellValue, foundCells);\n      // console.log({ matchedCells });\n\n      const cellKey =\n        i.toString() +\n        (matchedCells && matchedCells.reduce((s, value) => s + value, ''));\n\n      items.push(\n        <WordBox\n          value={cellValue}\n          key={cellKey} // to re-instantiate component\n          onToggled={onCellToggled}\n          completed={matchedCells && matchedCells.length > 0}\n          disabled={disabled}\n        />\n      );\n    }\n\n    return <RowContainer key={index}>{items}</RowContainer>;\n  };\n\n  const boxes = [];\n  for (let i = 0; i < board.length; i++) {\n    boxes.push(generateRow(board[i], i));\n  }\n\n  return (\n    <div style={{ margin: '0 15px 0 0', overflowX: 'auto' }}>\n      <div\n        style={{\n          paddingTop: '1px',\n          paddingRight: '1px',\n          background: 'black'\n        }}\n      >\n        {boxes}\n      </div>\n    </div>\n  );\n}\n\nBoard.propTypes = {\n  board: PropTypes.array.isRequired,\n  onCellToggled: PropTypes.func,\n  findFoundKeyInBox: PropTypes.func\n};\n\nexport default Board;\n","/* eslint-disable */\n\nexport function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXTZ';\n  const rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n\nexport function toUnsignedVietnamese(text) {\n  var str = text;\n  str = str.toLowerCase();\n  str = str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g, 'a');\n  str = str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g, 'e');\n  str = str.replace(/ì|í|ị|ỉ|ĩ/g, 'i');\n  str = str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g, 'o');\n  str = str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g, 'u');\n  str = str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g, 'y');\n  str = str.replace(/đ/g, 'd');\n  str = str.replace(\n    /!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'|\\\"|\\&|\\#|\\[|\\]|~|\\$|_|`|-|{|}|\\||\\\\/g,\n    ' '\n  );\n  str = str.replace(/ + /g, ' ');\n  str = str.trim();\n  return str;\n}\n\nexport function distinct(array) {\n  return array.filter((value, index, self) => self.indexOf(value) === index);\n}\n\nexport function distinctNotCaseSensitive(array) {\n  return array.filter((value, index, self) => {\n    const foundIndex = self.findIndex(\n      x => x.toLowerCase() === value.toLowerCase()\n    );\n    return foundIndex === index;\n  });\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, wordText, direction, initPosition) {\n  // console.log({ board, word: wordText, direction, initPosition });\n\n  for (let i = 0; i < wordText.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingChar = board[ycell][xcell].char;\n    if (existingChar !== '' && existingChar !== wordText[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from '../util';\nimport { pickRandomDirection, pickRandomPosition } from './random-pick';\nimport { isValid } from './availability-checker';\n\n// wordInfo: key, text\nexport function generateBoard(words) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  if (!words || words.length === 0) return [];\n  // console.log('generate board');\n\n  words.sort((a, b) => b.text.length - a.text.length);\n  const ADDITIONAL_CELL = 1;\n  const MIN_SIZE = 5;\n  const size = words[0].text.length + ADDITIONAL_CELL;\n  const board = initBoard(Math.max(size, MIN_SIZE));\n  // console.log({ data: originalWords, words, size });\n\n  const renderFailed = [];\n  words\n    // .filter(x => x)\n    // .map(x => x.trim().toUpperCase())\n    .forEach(word => {\n      // use as the key of word in the word list\n      // const index = originalWords.findIndex(x => x.trim().toUpperCase() === w);\n      // console.log({ w, index, words });\n      const success = tryToFillWordToBoard(board, word);\n      if (!success) {\n        renderFailed.push(word.key);\n      }\n    });\n\n  fillRandomChar(board);\n\n  return { board, renderFailed };\n}\n\nfunction createCell(char, position, wordKey) {\n  // console.log({ char, position, wordKey });\n\n  return {\n    char,\n    position,\n    tags: [wordKey]\n  };\n}\n\nfunction appendTagToCell(cell, wordKey) {\n  // console.log({ cell, wordKey });\n\n  return { ...cell, tags: [...cell.tags, wordKey] };\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(createCell('', { x: j, y: i }));\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i].char === '') {\n        row[i].char = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word) {\n  // random direction\n  // random position\n  // check if availability\n  // try some times\n  // return success or not\n  const { text, key } = word;\n  const MAX_TRY = 100;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, text.length, direction);\n    // if (count === 0) {\n    //   console.log('count = 0 >>>', {\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // } else {\n    //   console.log({\n    //     board: JSON.stringify(board),\n    //     word,\n    //     direction,\n    //     position,\n    //     count\n    //   });\n    // }\n  } while (!isValid(board, text, direction, position) && ++count < MAX_TRY);\n\n  if (count < MAX_TRY) {\n    fillWordToBoard(board, word, direction, position);\n    return true;\n  } else {\n    // Ignore this word\n    console.log('ignore the word >>>', text);\n    return false;\n  }\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition) {\n  const { key, text } = word;\n  for (let i = 0; i < text.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const cell = board[ycell][xcell];\n    if (cell.char) {\n      appendTagToCell(cell, key);\n    } else {\n      board[ycell][xcell] = createCell(text[i], { x: xcell, y: ycell }, key);\n    }\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Board from './Board';\nimport _ from 'lodash';\nimport { generateBoard } from '../../builder';\nimport { toUnsignedVietnamese } from '../../../util';\nimport { findTextInWords } from '../../wordDetection';\n\nexport default class BoardContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    onWordFound: PropTypes.func,\n    disabled: PropTypes.bool\n  };\n\n  _formattedWords = [];\n\n  constructor(props) {\n    super(props);\n\n    this._formattedWords = props.words.map((x, index) => {\n      const formattedText = toUnsignedVietnamese(x)\n        .replace(/ */g, '')\n        .toUpperCase();\n      return { text: formattedText, key: index };\n    });\n\n    const { board, renderFailed } = generateBoard([...this._formattedWords]);\n\n    this.state = {\n      selectedCells: [],\n      wordsFound: [],\n      board,\n      renderFailed: renderFailed,\n      foundCells: []\n    };\n\n    props.onFinishRender(renderFailed);\n  }\n\n  handleCellToggled = (value, state) => {\n    // console.log('cell toggled >>> ', value, state);\n    let selectedCells;\n    if (state) {\n      selectedCells = [...this.state.selectedCells, value];\n    } else {\n      selectedCells = this.state.selectedCells.filter(\n        x => !_.isEqual(x, value)\n      );\n    }\n\n    this.setState(\n      {\n        selectedCells\n      },\n      this.handleSelectedCellsChanged\n    );\n  };\n\n  handleSelectedCellsChanged = () => {\n    const foundWord = this.checkWordComplete();\n    const completedKey = foundWord && foundWord.key;\n    // console.log('>>> completedKey: ', completedKey);\n\n    if (_.isNumber(completedKey)) {\n      console.log('congratulation >>> you found one word');\n      this.setState(\n        {\n          selectedCells: [],\n          wordsFound: [...this.state.wordsFound, completedKey],\n          foundCells: [\n            ...this.state.foundCells,\n            {\n              key: completedKey,\n              cells: this.state.selectedCells\n            }\n          ]\n        },\n        () => {\n          this.props.onWordFound(this.state.wordsFound);\n          _.find(\n            this._formattedWords,\n            x => x.key === completedKey\n          ).found = true;\n        }\n      );\n    }\n  };\n\n  checkWordComplete = () => {\n    return findTextInWords(\n      this.state.selectedCells,\n      this._formattedWords.filter(x => !x.found)\n    );\n  };\n\n  render() {\n    return (\n      <Board\n        board={this.state.board}\n        onCellToggled={this.handleCellToggled}\n        findFoundKeyInBox={this.findFoundKeyInBox}\n        disabled={this.props.disabled}\n        foundCells={this.state.foundCells}\n      />\n    );\n  }\n}\n","export function findTextInWords(cells, words) {\n  // same direction\n  // continuously\n  // found in words\n  // sort the cells\n  const sortedCells = sortByPosition(cells);\n  return isContinued(sortedCells) && findIndWords(sortedCells, words);\n}\n\nexport function sortByPosition(cells) {\n  return cells.sort(\n    (a, b) => a.position.x - b.position.x || a.position.y - b.position.y\n  );\n}\n\n// Don't use\nexport function isInALine(cells) {\n  if (cells && cells.length === 1) return true;\n  const firstCell = cells[0];\n  return (\n    cells.every(c => c.position.x === firstCell.position.x) ||\n    cells.every(c => c.position.y === firstCell.position.y) ||\n    cells.every(\n      c =>\n        c.position.x - firstCell.position.x ===\n        c.position.y - firstCell.position.y\n    )\n  );\n}\n\nexport function isContinued(cells) {\n  if (cells && cells.length <= 1) {\n    return true;\n  }\n\n  const deltaX = cells[1].position.x - cells[0].position.x;\n  const deltaY = cells[1].position.y - cells[0].position.y;\n\n  if (\n    (deltaX !== 0 && deltaX !== 1 && deltaX !== -1) ||\n    (deltaY !== 0 && deltaY !== 1 && deltaY !== -1)\n  ) {\n    return false;\n  }\n\n  for (let i = 2; i < cells.length; i++) {\n    if (\n      deltaX !== cells[i].position.x - cells[i - 1].position.x ||\n      deltaY !== cells[i].position.y - cells[i - 1].position.y\n    ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport function findIndWords(cells, words) {\n  return (\n    words.find(x => x.text === cells.map(x => x.char).join('')) ||\n    words.find(\n      x =>\n        x.text ===\n        cells\n          .map(x => x.char)\n          .reverse()\n          .join('')\n    )\n  );\n}\n","import React from 'react';\nimport _ from 'lodash';\n\n// Random component\nexport const Completionist = () => (\n  <span style={{ color: 'blue' }}>Không được khôn nhắm =]]</span>\n);\n\n// Renderer callback with condition\nexport default ({ hours, minutes, seconds, completed }) => {\n  if (completed) {\n    // Render a completed state\n    return <Completionist />;\n  } else {\n    // Render a countdown\n    return (\n      <span>\n        Time left:\n        <span style={{ color: 'red', marginLeft: '10px' }}>\n          {_.padStart(minutes, 2, '0')}:{_.padStart(seconds, 2, '0')}\n        </span>\n      </span>\n    );\n  }\n};\n","import React from 'react';\nimport { ListGroup } from 'react-bootstrap';\n\nexport default function WordList({ words }) {\n  return (\n    <ListGroup>\n      {words.map((item, index) => {\n        const { value, notRendered, found } = item;\n        return (\n          <ListGroup.Item\n            as=\"li\"\n            key={index}\n            variant={notRendered ? 'warning' : found ? 'dark' : ''}\n          >\n            {value}\n          </ListGroup.Item>\n        );\n      })}\n    </ListGroup>\n  );\n}\n","import React, { Component } from 'react';\nimport { Button, Modal } from 'react-bootstrap';\nimport Board from '../Board';\nimport PropTypes from 'prop-types';\nimport Countdown from 'react-countdown-now';\nimport CustomizedCountDown from './CustomizedCountDown';\nimport WordList from './components/WordList';\n\nexport default class GamePlayingContainer extends Component {\n  static propTypes = {\n    words: PropTypes.array.isRequired,\n    duration: PropTypes.number\n  };\n\n  static defaultProps = {\n    duration: 3000\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      wordsFound: [],\n      boardId: 0,\n      failedIndexs: [],\n      timer: {\n        startedTime: Date.now(),\n        timeup: false\n      },\n      completed: false,\n      renewConfirmationShow: false\n    };\n  }\n\n  handleGameEnded = () => {\n    const { wordsFound, failedIndexs } = this.state;\n    if (wordsFound.length + failedIndexs.length === this.props.words.length) {\n      this.setState(\n        {\n          completed: true\n        },\n        () => {\n          this._countdown.pause();\n        }\n      );\n    }\n  };\n\n  remake = () => {\n    this.setState({\n      wordsFound: [],\n      boardId: this.state.boardId + 1,\n      timer: {\n        startedTime: Date.now(),\n        timeup: false\n      },\n      completed: false\n    });\n  };\n\n  handleRenderFailed = indexs => {\n    // console.log({ indexs });\n    this.setState({\n      failedIndexs: indexs\n    });\n  };\n\n  handleTimeUp = () => {\n    this.setState({\n      timer: {\n        ...this.state.timer,\n        timeup: true\n      }\n    });\n  };\n\n  renderWordList() {\n    const { words } = this.props;\n    const { failedIndexs, wordsFound } = this.state;\n\n    const NUM_OF_ITEMS_IN_COL = 9;\n    const numOfColumn = Math.ceil(words.length / NUM_OF_ITEMS_IN_COL);\n    // console.log({ numOfColumn });\n\n    const cols = [];\n    for (let i = 0; i < numOfColumn; i++) {\n      cols.push([]);\n    }\n\n    words.forEach((word, index) => {\n      const item = {\n        value: word,\n        notRendered: failedIndexs.includes(index),\n        found: wordsFound && wordsFound.includes(index)\n      };\n\n      const colIndex = index % numOfColumn;\n      cols[colIndex].push(item);\n    });\n\n    return (\n      <div style={{ display: 'flex' }}>\n        {cols.map((x, index) => {\n          return (\n            <div key={index} style={{ marginRight: '20px' }}>\n              <WordList words={x} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  handleCancel = () => {\n    this.setState({\n      renewConfirmationShow: false\n    });\n  };\n\n  handleConfirm = () => {\n    this.setState(\n      {\n        renewConfirmationShow: false\n      },\n      this.props.onNewGame\n    );\n  };\n\n  handleRenewClick = () => {\n    const isPlaying = !this.state.completed && this.state.wordsFound.length > 0;\n    if (isPlaying) {\n      this.setState({\n        renewConfirmationShow: true\n      });\n    } else {\n      this.props.onNewGame();\n    }\n  };\n\n  render() {\n    const { words } = this.props;\n    return (\n      <div>\n        <h2>{this.props.topic || 'Have fun'}</h2>\n        <h4>\n          <Countdown\n            date={this.state.timer.startedTime + this.props.duration}\n            onComplete={this.handleTimeUp}\n            renderer={CustomizedCountDown}\n            key={this.state.timer.startedTime}\n            ref={countdown => (this._countdown = countdown)}\n          />\n        </h4>\n        {this.state.completed && (\n          <h4>\n            <span style={{ color: 'green' }}>Congratulation!</span>\n          </h4>\n        )}\n        <br />\n        <div\n          style={{\n            display: 'flex',\n            justifyContent: 'center'\n          }}\n        >\n          <Board\n            disabled={this.state.timer.timeup || this.state.completed}\n            key={this.state.boardId}\n            words={words}\n            onWordFound={wordsFound => {\n              this.setState({ wordsFound }, this.handleGameEnded);\n            }}\n            onFinishRender={this.handleRenderFailed}\n          />\n\n          <div>\n            <Button\n              variant=\"success\"\n              onClick={this.handleRenewClick}\n              // disabled={!this.state.timer.timeup && !this.state.completed}\n            >\n              New game\n            </Button>\n            <Button\n              variant=\"success\"\n              onClick={this.remake}\n              style={{ marginLeft: '10px' }}\n            >\n              Remake\n            </Button>\n            <br />\n            <br />\n            <div style={{ float: 'left' }}>\n              Found words:{' '}\n              <strong>\n                {this.state.wordsFound.length}/\n                {words.length - this.state.failedIndexs.length}\n              </strong>\n            </div>\n            <br />\n            {this.renderWordList()}\n            <br />\n            {this.state.failedIndexs.length > 0 && (\n              <div style={{ color: 'red' }}>\n                There are {this.state.failedIndexs.length} word(s) failed to\n                render. You can play with the rendered words or click{' '}\n                <span style={{ color: 'blue' }}>Remake</span> button to try\n                again.\n              </div>\n            )}\n          </div>\n        </div>\n        <br />\n        <br />\n        <Modal\n          show={this.state.renewConfirmationShow}\n          onHide={this.handleCancel}\n        >\n          <Modal.Header closeButton>\n            <Modal.Title>New game</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Do you really want to renew the game?</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={this.handleCancel}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" onClick={this.handleConfirm}>\n              Renew\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { distinctNotCaseSensitive } from '../../../util';\nimport NumericInput from 'react-numeric-input';\n\nconst DEFAULT_LIMMITED_TIME = 3;\n\nexport default class GameMaking extends Component {\n  state = {\n    gameTitle: '',\n    textValue: '',\n    limittedTime: DEFAULT_LIMMITED_TIME\n  };\n\n  handleWordsChange(event) {\n    const value = event.target.value;\n    this.setState({ textValue: value });\n  }\n\n  handleGameTitleChange(event) {\n    const value = event.target.value;\n    this.setState({ gameTitle: value });\n  }\n\n  makeGame() {\n    if (!this.state.textValue) return;\n    // split\n    // trim\n    // remove empty items\n    // distinct\n    let words = this.state.textValue\n      .split(/,|\\n/)\n      .map(w => w.trim())\n      .filter(x => x);\n\n    words = distinctNotCaseSensitive(words);\n\n    if (words.length === 0) return;\n\n    this.props.onMakeGame(\n      words,\n      this.state.gameTitle,\n      this.state.limittedTime * 60 * 1000\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <br />\n        <Form>\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                type=\"text\"\n                placeholder=\"What's the topic?\"\n                value={this.state.gameTitle}\n                onChange={e => this.handleGameTitleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 4, offset: 4 }}>\n              <Form.Control\n                size=\"lg\"\n                placeholder=\"Enter the list of words\"\n                value={this.state.textValue}\n                onChange={e => this.handleWordsChange(e)}\n                as=\"textarea\"\n                rows=\"6\"\n              />\n            </Col>\n          </Form.Row>\n          <Form.Text className=\"text-muted\">\n            Separated by comma (,) or line\n          </Form.Text>\n          <br />\n          <Form.Row>\n            <Col sm={{ span: 'auto', offset: 4 }}>\n              <Form.Text>Limmited Time:</Form.Text>\n            </Col>\n            <Col sm={{ span: '1' }}>\n              <NumericInput\n                className=\"form-control\"\n                value={this.state.limittedTime}\n                min={0.5}\n                max={100}\n                step={0.5}\n                precision={1}\n                snap\n                onChange={value => {\n                  this.setState({\n                    limittedTime: value\n                  });\n                }}\n              />\n            </Col>\n            <Col sm={{ span: 'auto' }}>\n              <Form.Text>in minutes</Form.Text>\n            </Col>\n          </Form.Row>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.makeGame();\n            }}\n            disabled={!this.state.textValue.trim()}\n          >\n            Generate\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React from 'react';\n// import PropTypes from 'prop-types';\n// import styled from 'styled-components';\nimport GamePlayingContainer from './components/GamePlaying';\nimport GameMaking from './components/GameMaking';\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst GameStatus = {\n  Making: 0,\n  Playing: 1\n};\n\nclass WordSearch extends React.Component {\n  state = {\n    words: [],\n    gameStatus: GameStatus.Making\n  };\n\n  makeGame = (words, topic, limittedTime) => {\n    this.setState({\n      words,\n      topic,\n      limittedTime,\n      gameEnded: false,\n      gameStatus: GameStatus.Playing\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        {this.state.gameStatus === GameStatus.Making && (\n          <GameMaking onMakeGame={this.makeGame} />\n        )}\n        <br />\n        {this.state.gameStatus === GameStatus.Playing && (\n          <GamePlayingContainer\n            words={this.state.words}\n            topic={this.state.topic}\n            onNewGame={() =>\n              this.setState({\n                gameStatus: GameStatus.Making\n              })\n            }\n            duration={this.state.limittedTime}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}