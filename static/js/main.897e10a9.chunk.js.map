{"version":3,"sources":["puzzles/components/WordBox/index.js","puzzles/util.js","puzzles/WordSearch/random-pick.js","puzzles/WordSearch/availability-checker.js","puzzles/WordSearch/builder.js","puzzles/WordSearch/index.js","App.js","serviceWorker.js","index.js"],"names":["Box","styled","span","_templateObject","DISPLAY_COLOR","WordBox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","color","selected","_this2","setState","onToggled","value","_this3","stylesObj","background","completed","react_default","a","createElement","onClick","toggle","style","char","React","Component","getRndInteger","min","max","Math","floor","random","randomChar","chars","length","getAvailableRange","size","directionValue","from","to","pickRandomDirection","direction","x","y","pickRandomPosition","area","getAvailableArea","isValid","board","word","initPosition","i","xcell","ycell","existingChar","createCell","tags","key","arguments","undefined","checkSum","appendTagToCell","cell","push","generateBoard","words","console","log","sort","b","row","j","initBoard","filter","map","trim","toUpperCase","forEach","w","index","position","count","fillWordToBoard","tryToFillWordToBoard","fillRandomChar","RowContainer","div","WordSearch_templateObject","WordSearch","handleCellToggled","selectedCells","concat","toConsumableArray","_","isEqual","completedKey","checkWordComplete","isNumber","wordsFound","boardId","includes","arr","items","cellValue","foundKey","checkWordBoxComplete","cellKey","toString","components_WordBox","_ref","every","some","tag","textValue","split","event","target","boxes","generateRow","_this$state","showCompletedMessage","Form","Label","Row","Col","sm","Control","as","rows","onChange","e","handleChange","Button","variant","generate","display","margin","Alert","dismissible","Heading","App","className","puzzles_WordSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.897e10a9.chunk.js","sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Box = styled.span`\n  background: gray;\n  width: 50px;\n  height: 50px;\n  text-align: center;\n  margin-left: 1px;\n  margin-bottom: 1px;\n  font-size: 2em;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\n\nconst SELECTED_COLOR = 'red';\nconst CORRECT_COLOR = 'green';\nconst DISPLAY_COLOR = 'gray';\n\nclass WordBox extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      color: DISPLAY_COLOR,\n      selected: false\n    };\n  }\n\n  toggle() {\n    this.setState(\n      {\n        selected: !this.state.selected\n      },\n      () => this.props.onToggled(this.props.value, this.state.selected)\n    );\n  }\n\n  render() {\n    const stylesObj = {\n      background: this.state.selected\n        ? SELECTED_COLOR\n        : this.props.completed\n        ? CORRECT_COLOR\n        : DISPLAY_COLOR\n    };\n\n    return (\n      <Box\n        onClick={() => {\n          this.toggle();\n        }}\n        style={stylesObj}\n      >\n        {this.props.value.char}\n      </Box>\n    );\n  }\n}\n\nWordBox.propTypes = {};\n\nexport default WordBox;\n","export function getRndInteger(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function randomChar() {\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXTZ\";\n  var rnum = Math.floor(Math.random() * chars.length);\n  return chars[rnum];\n}\n","import { getRndInteger } from \"../util\";\n\nfunction getAvailableRange(size, length, directionValue) {\n  let from = 0;\n  let to = 0;\n  switch (directionValue) {\n    case 0:\n      from = 0;\n      to = size - 1;\n      break;\n\n    case 1:\n      from = 0;\n      to = size - length - 1;\n      break;\n\n    case -1:\n      from = length;\n      to = size - 1;\n      break;\n\n    default:\n      break;\n  }\n\n  return [from, to];\n}\n\nexport function getAvailableArea(size, length, direction) {\n  const x = getAvailableRange(size, length, direction.x);\n  const y = getAvailableRange(size, length, direction.y);\n\n  return { x, y };\n}\n\nfunction randomDirection() {\n  const xDicection = getRndInteger(0, 2) - 1;\n  const yDircection = getRndInteger(0, 2) - 1;\n  return {\n    x: xDicection,\n    y: yDircection\n  };\n}\n\nexport function pickRandomDirection() {\n  let direction;\n  do {\n    direction = randomDirection();\n  } while (direction.x === 0 && direction.y === 0);\n  return direction;\n}\n\nexport function pickRandomPosition(size, length, direction) {\n  const area = getAvailableArea(size, length, direction);\n  const x = getRndInteger(area.x[0], area.x[1]);\n  const y = getRndInteger(area.y[0], area.y[1]);\n  return { x, y };\n}\n","export function isValid(board, word, direction, initPosition) {\n  // console.log({ board, word, direction, initPosition });\n\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const existingChar = board[xcell][ycell].char;\n    if (existingChar !== '' && existingChar !== word[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { randomChar } from '../util';\nimport { pickRandomDirection, pickRandomPosition } from './random-pick';\nimport { isValid } from './availability-checker';\n\nfunction createCell(char, key = -1, checkSum = 0) {\n  // Should have cellId\n  return {\n    char,\n    tags: [{ key, checkSum }]\n  };\n}\n\nfunction appendTagToCell(cell, key, checkSum) {\n  cell.tags.push({\n    key,\n    checkSum\n  });\n  return cell;\n}\n\nexport function generateBoard(words) {\n  // calculate board size\n  // init empty board\n  // fill all the words from longest one\n  // fill random chars to empty cells\n  // return\n  if (!words || words.length === 0) return [];\n  console.log('generate board');\n\n  words.sort((a, b) => a.length < b.length);\n  const ADDITIONAL_CELL = 3;\n  const size = words[0].length + ADDITIONAL_CELL;\n  const board = initBoard(size);\n  // console.log({ words, size });\n\n  words\n    .filter(x => x)\n    .map(x => x.trim().toUpperCase())\n    .forEach((w, index) => {\n      tryToFillWordToBoard(board, w, index);\n    });\n\n  fillRandomChar(board);\n\n  return board;\n}\n\nfunction initBoard(size) {\n  const board = [];\n  for (let i = 0; i < size; i++) {\n    const row = [];\n    for (let j = 0; j < size; j++) {\n      row.push(createCell(''));\n    }\n    board.push(row);\n  }\n\n  return board;\n}\n\nfunction fillRandomChar(board) {\n  board.forEach(row => {\n    for (let i = 0; i < row.length; i++) {\n      if (row[i].char === '') {\n        row[i].char = randomChar();\n      }\n    }\n  });\n}\n\nfunction tryToFillWordToBoard(board, word, key) {\n  // random direction\n  // random position\n  // check if availability\n  // try some times\n  // return success or not\n  const MAX_TRY = 100;\n  let count = 0;\n  let direction;\n  let position;\n  const size = board.length;\n  do {\n    direction = pickRandomDirection();\n    position = pickRandomPosition(size, word.length, direction);\n    // console.log({ count, direction, position, word });\n  } while (!isValid(board, word, direction, position) && ++count < MAX_TRY);\n\n  if (count >= MAX_TRY) {\n    // Ignore this word\n    console.log('ignore the word >>>', word);\n\n    return;\n  }\n\n  fillWordToBoard(board, word, direction, position, key);\n}\n\nfunction fillWordToBoard(board, word, direction, initPosition, key) {\n  for (let i = 0; i < word.length; i++) {\n    const xcell = initPosition.x + i * direction.x;\n    const ycell = initPosition.y + i * direction.y;\n    const cell = board[xcell][ycell];\n    if (cell.char) {\n      appendTagToCell(cell, key, word.length);\n    } else {\n      board[xcell][ycell] = createCell(word[i], key, word.length);\n    }\n  }\n}\n","import React from 'react';\n// import PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { Form, Button, Col, Alert } from 'react-bootstrap';\nimport WordBox from '../components/WordBox';\nimport { generateBoard } from './builder';\nimport _ from 'lodash';\n\nconst RowContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\n/* eslint-disable react/prefer-stateless-function */\nclass WordSearch extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      board: [],\n      words: [],\n      selectedCells: [],\n      wordsFound: [],\n      boardId: 1\n    };\n  }\n\n  checkWordBoxComplete(tags) {\n    for (let i = 0; i < tags.length; i++) {\n      if (this.state.wordsFound.includes(tags[i].key)) {\n        return tags[i].key;\n      }\n    }\n    return '';\n  }\n\n  generateRow(arr, index) {\n    const items = [];\n    for (let i = 0; i < arr.length; i++) {\n      const cellValue = arr[i];\n      const foundKey = this.checkWordBoxComplete(cellValue.tags);\n      const cellKey = i.toString() + foundKey.toString();\n      items.push(\n        <WordBox\n          value={cellValue}\n          key={cellKey} // to re-instantiate component\n          onToggled={this.handleCellToggled}\n          completed={_.isNumber(foundKey)}\n        />\n      );\n    }\n    return <RowContainer key={index}>{items}</RowContainer>;\n  }\n\n  handleCellToggled = (value, state) => {\n    // console.log('cell toggled >>> ', value, state);\n    let selectedCells;\n    if (state) {\n      selectedCells = [...this.state.selectedCells, value];\n    } else {\n      selectedCells = this.state.selectedCells.filter(\n        x => !_.isEqual(x, value)\n      );\n    }\n\n    this.setState(\n      {\n        selectedCells\n      },\n      () => {\n        const completedKey = this.checkWordComplete();\n        // console.log('>>> completedKey: ', completedKey);\n\n        if (_.isNumber(completedKey)) {\n          console.log('congratulation >>> you found one word');\n          this.setState({\n            selectedCells: [],\n            wordsFound: [...this.state.wordsFound, completedKey]\n          });\n        }\n      }\n    );\n  };\n\n  checkWordComplete() {\n    const { selectedCells } = this.state;\n    // same key\n    // num of items = checkSum\n    // key > 0\n    if (selectedCells && selectedCells.length > 0) {\n      const { tags } = selectedCells[0];\n      let foundKey = null;\n      // console.log('tags ', tags, selectedCells);\n      tags.forEach(({ key, checkSum }) => {\n        if (key >= 0 && checkSum === selectedCells.length) {\n          const sameKey = _.every(selectedCells, cell =>\n            _.some(cell.tags, tag => tag.key === key)\n          );\n          // console.log('tag >>> ', { key, checkSum, sameKey });\n          if (sameKey) {\n            foundKey = key;\n            return;\n          }\n        }\n      });\n\n      return foundKey;\n    } else {\n      return null;\n    }\n  }\n\n  generate() {\n    if (!this.state.textValue) return;\n\n    const words = this.state.textValue.split('\\n');\n    const board = generateBoard(words);\n    this.setState({\n      words,\n      board,\n      boardId: this.state.boardId + 1,\n      wordsFound: []\n    });\n  }\n\n  handleChange(event) {\n    const textValue = event.target.value;\n    this.setState({ textValue });\n    // console.log(\"value >>> \", textValue);\n  }\n\n  render() {\n    // console.log('board rendering >>> ', this.state);\n    const boxes = [];\n    const { board } = this.state;\n    for (let i = 0; i < board.length; i++) {\n      boxes.push(this.generateRow(board[i], i));\n    }\n\n    const { words, wordsFound } = this.state;\n    const showCompletedMessage =\n      wordsFound.length > 0 && wordsFound.length === words.length;\n\n    return (\n      <div>\n        <h1>WordSearch generator</h1>\n        <Form>\n          <Form.Label>Enter the word list (1 word per line)</Form.Label>\n          <Form.Row>\n            <Col sm=\"4\" />\n            <Col sm=\"4\">\n              <Form.Control\n                as=\"textarea\"\n                rows=\"6\"\n                value={this.state.textValue}\n                onChange={e => this.handleChange(e)}\n              />\n            </Col>\n          </Form.Row>\n          <br />\n          <Button\n            variant=\"success\"\n            onClick={() => {\n              this.generate();\n            }}\n          >\n            Generate\n          </Button>\n        </Form>\n        <br />\n        <div\n          key={this.state.boardId} // re-render whenever board changes\n          style={{ display: 'table', margin: '0 auto' }}\n        >\n          {boxes}\n        </div>\n        <br />\n        <br />\n        {showCompletedMessage && (\n          <Alert dismissible variant=\"primary\">\n            <Alert.Heading>Congratulation!</Alert.Heading>\n            <p>You have found all the words</p>\n          </Alert>\n        )}\n      </div>\n    );\n  }\n}\n\nWordSearch.propTypes = {};\n\nexport default WordSearch;\n","import React, { Component } from \"react\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport WordSearch from \"./puzzles/WordSearch\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <WordSearch />\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}